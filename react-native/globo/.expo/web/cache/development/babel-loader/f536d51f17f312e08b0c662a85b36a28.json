{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"/Users/felipe/projects/test-react/node_modules/react-navigation/src/views/Drawer/DrawerScreen.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from 'react';\nimport SceneView from \"../SceneView\";\nimport withCachedChildNavigation from \"../../withCachedChildNavigation\";\n\nvar DrawerScreen = function (_React$PureComponent) {\n  _inherits(DrawerScreen, _React$PureComponent);\n\n  var _super = _createSuper(DrawerScreen);\n\n  function DrawerScreen() {\n    _classCallCheck(this, DrawerScreen);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(DrawerScreen, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          router = _this$props.router,\n          navigation = _this$props.navigation,\n          childNavigationProps = _this$props.childNavigationProps,\n          screenProps = _this$props.screenProps;\n      var _navigation$state = navigation.state,\n          routes = _navigation$state.routes,\n          index = _navigation$state.index;\n      var childNavigation = childNavigationProps[routes[index].key];\n      var Content = router.getComponentForRouteName(routes[index].routeName);\n      return React.createElement(SceneView, {\n        screenProps: screenProps,\n        component: Content,\n        navigation: childNavigation,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 21,\n          columnNumber: 7\n        }\n      });\n    }\n  }]);\n\n  return DrawerScreen;\n}(React.PureComponent);\n\nexport default withCachedChildNavigation(DrawerScreen);","map":{"version":3,"sources":["/Users/felipe/projects/test-react/node_modules/react-navigation/src/views/Drawer/DrawerScreen.js"],"names":["React","SceneView","withCachedChildNavigation","DrawerScreen","props","router","navigation","childNavigationProps","screenProps","state","routes","index","childNavigation","key","Content","getComponentForRouteName","routeName","PureComponent"],"mappings":";;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,OAAOC,SAAP;AACA,OAAOC,yBAAP;;IAKMC,Y;;;;;;;;;;;;;6BACK;AAAA,wBAMH,KAAKC,KANF;AAAA,UAELC,MAFK,eAELA,MAFK;AAAA,UAGLC,UAHK,eAGLA,UAHK;AAAA,UAILC,oBAJK,eAILA,oBAJK;AAAA,UAKLC,WALK,eAKLA,WALK;AAAA,8BAOmBF,UAAU,CAACG,KAP9B;AAAA,UAOCC,MAPD,qBAOCA,MAPD;AAAA,UAOSC,KAPT,qBAOSA,KAPT;AAQP,UAAMC,eAAe,GAAGL,oBAAoB,CAACG,MAAM,CAACC,KAAD,CAAN,CAAcE,GAAf,CAA5C;AACA,UAAMC,OAAO,GAAGT,MAAM,CAACU,wBAAP,CAAgCL,MAAM,CAACC,KAAD,CAAN,CAAcK,SAA9C,CAAhB;AACA,aACE,oBAAC,SAAD;AACE,QAAA,WAAW,EAAER,WADf;AAEE,QAAA,SAAS,EAAEM,OAFb;AAGE,QAAA,UAAU,EAAEF,eAHd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF;AAOD;;;;EAlBwBZ,KAAK,CAACiB,a;;AAqBjC,eAAef,yBAAyB,CAACC,YAAD,CAAxC","sourcesContent":["import React from 'react';\n\nimport SceneView from '../SceneView';\nimport withCachedChildNavigation from '../../withCachedChildNavigation';\n\n/**\n * Component that renders the child screen of the drawer.\n */\nclass DrawerScreen extends React.PureComponent {\n  render() {\n    const {\n      router,\n      navigation,\n      childNavigationProps,\n      screenProps,\n    } = this.props;\n    const { routes, index } = navigation.state;\n    const childNavigation = childNavigationProps[routes[index].key];\n    const Content = router.getComponentForRouteName(routes[index].routeName);\n    return (\n      <SceneView\n        screenProps={screenProps}\n        component={Content}\n        navigation={childNavigation}\n      />\n    );\n  }\n}\n\nexport default withCachedChildNavigation(DrawerScreen);\n"]},"metadata":{},"sourceType":"module"}