{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nexport default function getChildEventSubscriber(addListener, key) {\n  var actionSubscribers = new Set();\n  var willFocusSubscribers = new Set();\n  var didFocusSubscribers = new Set();\n  var willBlurSubscribers = new Set();\n  var didBlurSubscribers = new Set();\n\n  var getChildSubscribers = function getChildSubscribers(evtName) {\n    switch (evtName) {\n      case 'action':\n        return actionSubscribers;\n\n      case 'willFocus':\n        return willFocusSubscribers;\n\n      case 'didFocus':\n        return didFocusSubscribers;\n\n      case 'willBlur':\n        return willBlurSubscribers;\n\n      case 'didBlur':\n        return didBlurSubscribers;\n\n      default:\n        return null;\n    }\n  };\n\n  var emit = function emit(type, payload) {\n    var payloadWithType = _objectSpread(_objectSpread({}, payload), {}, {\n      type: type\n    });\n\n    var subscribers = getChildSubscribers(type);\n    subscribers && subscribers.forEach(function (subs) {\n      subs(payloadWithType);\n    });\n  };\n\n  var lastEmittedEvent = 'didBlur';\n\n  var cleanup = function cleanup() {\n    upstreamSubscribers.forEach(function (subs) {\n      return subs && subs.remove();\n    });\n  };\n\n  var upstreamEvents = ['willFocus', 'didFocus', 'willBlur', 'didBlur', 'action'];\n  var upstreamSubscribers = upstreamEvents.map(function (eventName) {\n    return addListener(eventName, function (payload) {\n      var state = payload.state,\n          lastState = payload.lastState,\n          action = payload.action;\n      var lastRoutes = lastState && lastState.routes;\n      var routes = state && state.routes;\n      var lastFocusKey = lastState && lastState.routes && lastState.routes[lastState.index].key;\n      var focusKey = routes && routes[state.index].key;\n      var isChildFocused = focusKey === key;\n      var lastRoute = lastRoutes && lastRoutes.find(function (route) {\n        return route.key === key;\n      });\n      var newRoute = routes && routes.find(function (route) {\n        return route.key === key;\n      });\n      var childPayload = {\n        context: key + \":\" + action.type + \"_\" + (payload.context || 'Root'),\n        state: newRoute,\n        lastState: lastRoute,\n        action: action,\n        type: eventName\n      };\n      var isTransitioning = !!state && state.isTransitioning;\n      var previouslyLastEmittedEvent = lastEmittedEvent;\n\n      if (lastEmittedEvent === 'didBlur') {\n        if (eventName === 'willFocus' && isChildFocused) {\n          emit(lastEmittedEvent = 'willFocus', childPayload);\n        } else if (eventName === 'action' && isChildFocused) {\n          emit(lastEmittedEvent = 'willFocus', childPayload);\n        }\n      }\n\n      if (lastEmittedEvent === 'willFocus') {\n        if (eventName === 'didFocus' && isChildFocused && !isTransitioning) {\n          emit(lastEmittedEvent = 'didFocus', childPayload);\n        } else if (eventName === 'action' && isChildFocused && !isTransitioning) {\n          emit(lastEmittedEvent = 'didFocus', childPayload);\n        }\n      }\n\n      if (lastEmittedEvent === 'didFocus') {\n        if (!isChildFocused) {\n          emit(lastEmittedEvent = 'willBlur', childPayload);\n        } else if (eventName === 'willBlur') {\n          emit(lastEmittedEvent = 'willBlur', childPayload);\n        } else if (eventName === 'action' && previouslyLastEmittedEvent === 'didFocus') {\n          emit('action', childPayload);\n        }\n      }\n\n      if (lastEmittedEvent === 'willBlur') {\n        if (eventName === 'action' && !isChildFocused && !isTransitioning) {\n          emit(lastEmittedEvent = 'didBlur', childPayload);\n        } else if (eventName === 'didBlur') {\n          emit(lastEmittedEvent = 'didBlur', childPayload);\n        }\n      }\n    });\n  });\n  return function (eventName, eventHandler) {\n    var subscribers = getChildSubscribers(eventName);\n\n    if (!subscribers) {\n      throw new Error(\"Invalid event name \\\"\" + eventName + \"\\\"\");\n    }\n\n    subscribers.add(eventHandler);\n\n    var remove = function remove() {\n      subscribers.delete(eventHandler);\n    };\n\n    return {\n      remove: remove\n    };\n  };\n}","map":{"version":3,"sources":["/Users/felipe/projects/test-react/node_modules/react-navigation/src/getChildEventSubscriber.js"],"names":["getChildEventSubscriber","addListener","key","actionSubscribers","Set","willFocusSubscribers","didFocusSubscribers","willBlurSubscribers","didBlurSubscribers","getChildSubscribers","evtName","emit","type","payload","payloadWithType","subscribers","forEach","subs","lastEmittedEvent","cleanup","upstreamSubscribers","remove","upstreamEvents","map","eventName","state","lastState","action","lastRoutes","routes","lastFocusKey","index","focusKey","isChildFocused","lastRoute","find","route","newRoute","childPayload","context","isTransitioning","previouslyLastEmittedEvent","eventHandler","Error","add","delete"],"mappings":"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","sourcesContent":["/*\n * This is used to extract one children's worth of events from a stream of navigation action events\n *\n * Based on the 'action' events that get fired for this navigation state, this utility will fire\n * focus and blur events for this child\n */\n\nexport default function getChildEventSubscriber(addListener, key) {\n  const actionSubscribers = new Set();\n  const willFocusSubscribers = new Set();\n  const didFocusSubscribers = new Set();\n  const willBlurSubscribers = new Set();\n  const didBlurSubscribers = new Set();\n\n  const getChildSubscribers = evtName => {\n    switch (evtName) {\n      case 'action':\n        return actionSubscribers;\n      case 'willFocus':\n        return willFocusSubscribers;\n      case 'didFocus':\n        return didFocusSubscribers;\n      case 'willBlur':\n        return willBlurSubscribers;\n      case 'didBlur':\n        return didBlurSubscribers;\n      default:\n        return null;\n    }\n  };\n\n  const emit = (type, payload) => {\n    const payloadWithType = { ...payload, type };\n    const subscribers = getChildSubscribers(type);\n    subscribers &&\n      subscribers.forEach(subs => {\n        subs(payloadWithType);\n      });\n  };\n\n  // lastEmittedEvent keeps track of focus state for one route. First we assume\n  // we are blurred. If we are focused on initialization, the first 'action'\n  // event will cause onFocus+willFocus events because we had previously been\n  // considered blurred\n  let lastEmittedEvent = 'didBlur';\n\n  const cleanup = () => {\n    upstreamSubscribers.forEach(subs => subs && subs.remove());\n  };\n\n  const upstreamEvents = [\n    'willFocus',\n    'didFocus',\n    'willBlur',\n    'didBlur',\n    'action',\n  ];\n\n  const upstreamSubscribers = upstreamEvents.map(eventName =>\n    addListener(eventName, payload => {\n      const { state, lastState, action } = payload;\n      const lastRoutes = lastState && lastState.routes;\n      const routes = state && state.routes;\n\n      const lastFocusKey =\n        lastState && lastState.routes && lastState.routes[lastState.index].key;\n      const focusKey = routes && routes[state.index].key;\n\n      const isChildFocused = focusKey === key;\n      const lastRoute =\n        lastRoutes && lastRoutes.find(route => route.key === key);\n      const newRoute = routes && routes.find(route => route.key === key);\n      const childPayload = {\n        context: `${key}:${action.type}_${payload.context || 'Root'}`,\n        state: newRoute,\n        lastState: lastRoute,\n        action,\n        type: eventName,\n      };\n      const isTransitioning = !!state && state.isTransitioning;\n\n      const previouslyLastEmittedEvent = lastEmittedEvent;\n\n      if (lastEmittedEvent === 'didBlur') {\n        // The child is currently blurred. Look for willFocus conditions\n        if (eventName === 'willFocus' && isChildFocused) {\n          emit((lastEmittedEvent = 'willFocus'), childPayload);\n        } else if (eventName === 'action' && isChildFocused) {\n          emit((lastEmittedEvent = 'willFocus'), childPayload);\n        }\n      }\n      if (lastEmittedEvent === 'willFocus') {\n        // We are currently mid-focus. Look for didFocus conditions.\n        // If state.isTransitioning is false, this child event happens immediately after willFocus\n        if (eventName === 'didFocus' && isChildFocused && !isTransitioning) {\n          emit((lastEmittedEvent = 'didFocus'), childPayload);\n        } else if (\n          eventName === 'action' &&\n          isChildFocused &&\n          !isTransitioning\n        ) {\n          emit((lastEmittedEvent = 'didFocus'), childPayload);\n        }\n      }\n\n      if (lastEmittedEvent === 'didFocus') {\n        // The child is currently focused. Look for blurring events\n        if (!isChildFocused) {\n          // The child is no longer focused within this navigation state\n          emit((lastEmittedEvent = 'willBlur'), childPayload);\n        } else if (eventName === 'willBlur') {\n          // The parent is getting a willBlur event\n          emit((lastEmittedEvent = 'willBlur'), childPayload);\n        } else if (\n          eventName === 'action' &&\n          previouslyLastEmittedEvent === 'didFocus'\n        ) {\n          // While focused, pass action events to children for grandchildren focus\n          emit('action', childPayload);\n        }\n      }\n\n      if (lastEmittedEvent === 'willBlur') {\n        // The child is mid-blur. Wait for transition to end\n        if (eventName === 'action' && !isChildFocused && !isTransitioning) {\n          // The child is done blurring because transitioning is over, or isTransitioning\n          // never began and didBlur fires immediately after willBlur\n          emit((lastEmittedEvent = 'didBlur'), childPayload);\n        } else if (eventName === 'didBlur') {\n          // Pass through the parent didBlur event if it happens\n          emit((lastEmittedEvent = 'didBlur'), childPayload);\n        }\n      }\n    })\n  );\n\n  return (eventName, eventHandler) => {\n    const subscribers = getChildSubscribers(eventName);\n    if (!subscribers) {\n      throw new Error(`Invalid event name \"${eventName}\"`);\n    }\n    subscribers.add(eventHandler);\n    const remove = () => {\n      subscribers.delete(eventHandler);\n    };\n    return { remove };\n  };\n}\n"]},"metadata":{},"sourceType":"module"}