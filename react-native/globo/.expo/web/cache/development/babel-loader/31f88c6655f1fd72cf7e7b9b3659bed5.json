{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"/Users/felipe/projects/test-react/node_modules/react-navigation/src/views/CardStack/PointerEventsContainer.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from 'react';\nimport invariant from \"../../utils/invariant\";\nimport AnimatedValueSubscription from \"../AnimatedValueSubscription\";\nvar MIN_POSITION_OFFSET = 0.01;\nexport default function create(Component) {\n  var Container = function (_React$Component) {\n    _inherits(Container, _React$Component);\n\n    var _super = _createSuper(Container);\n\n    function Container(props, context) {\n      var _this;\n\n      _classCallCheck(this, Container);\n\n      _this = _super.call(this, props, context);\n      _this._pointerEvents = _this._computePointerEvents();\n      return _this;\n    }\n\n    _createClass(Container, [{\n      key: \"componentWillMount\",\n      value: function componentWillMount() {\n        this._onPositionChange = this._onPositionChange.bind(this);\n        this._onComponentRef = this._onComponentRef.bind(this);\n      }\n    }, {\n      key: \"componentDidMount\",\n      value: function componentDidMount() {\n        this._bindPosition(this.props);\n      }\n    }, {\n      key: \"componentWillUnmount\",\n      value: function componentWillUnmount() {\n        this._positionListener && this._positionListener.remove();\n      }\n    }, {\n      key: \"componentWillReceiveProps\",\n      value: function componentWillReceiveProps(nextProps) {\n        this._bindPosition(nextProps);\n      }\n    }, {\n      key: \"render\",\n      value: function render() {\n        this._pointerEvents = this._computePointerEvents();\n        return React.createElement(Component, _extends({}, this.props, {\n          pointerEvents: this._pointerEvents,\n          onComponentRef: this._onComponentRef,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 39,\n            columnNumber: 9\n          }\n        }));\n      }\n    }, {\n      key: \"_onComponentRef\",\n      value: function _onComponentRef(component) {\n        this._component = component;\n\n        if (component) {\n          invariant(typeof component.setNativeProps === 'function', 'component must implement method `setNativeProps`');\n        }\n      }\n    }, {\n      key: \"_bindPosition\",\n      value: function _bindPosition(props) {\n        this._positionListener && this._positionListener.remove();\n        this._positionListener = new AnimatedValueSubscription(props.position, this._onPositionChange);\n      }\n    }, {\n      key: \"_onPositionChange\",\n      value: function _onPositionChange() {\n        if (this._component) {\n          var pointerEvents = this._computePointerEvents();\n\n          if (this._pointerEvents !== pointerEvents) {\n            this._pointerEvents = pointerEvents;\n\n            this._component.setNativeProps({\n              pointerEvents: pointerEvents\n            });\n          }\n        }\n      }\n    }, {\n      key: \"_computePointerEvents\",\n      value: function _computePointerEvents() {\n        var _this$props = this.props,\n            navigation = _this$props.navigation,\n            position = _this$props.position,\n            scene = _this$props.scene;\n\n        if (scene.isStale || navigation.state.index !== scene.index) {\n          return scene.index > navigation.state.index ? 'box-only' : 'none';\n        }\n\n        var offset = position.__getAnimatedValue() - navigation.state.index;\n\n        if (Math.abs(offset) > MIN_POSITION_OFFSET) {\n          return 'box-only';\n        }\n\n        return 'auto';\n      }\n    }]);\n\n    return Container;\n  }(React.Component);\n\n  return Container;\n}","map":{"version":3,"sources":["/Users/felipe/projects/test-react/node_modules/react-navigation/src/views/CardStack/PointerEventsContainer.js"],"names":["React","invariant","AnimatedValueSubscription","MIN_POSITION_OFFSET","create","Component","Container","props","context","_pointerEvents","_computePointerEvents","_onPositionChange","bind","_onComponentRef","_bindPosition","_positionListener","remove","nextProps","component","_component","setNativeProps","position","pointerEvents","navigation","scene","isStale","state","index","offset","__getAnimatedValue","Math","abs"],"mappings":"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","sourcesContent":["import React from 'react';\nimport invariant from '../../utils/invariant';\nimport AnimatedValueSubscription from '../AnimatedValueSubscription';\n\nconst MIN_POSITION_OFFSET = 0.01;\n\n/**\n * Create a higher-order component that automatically computes the\n * `pointerEvents` property for a component whenever navigation position\n * changes.\n */\nexport default function create(Component) {\n  class Container extends React.Component {\n    constructor(props, context) {\n      super(props, context);\n      this._pointerEvents = this._computePointerEvents();\n    }\n\n    componentWillMount() {\n      this._onPositionChange = this._onPositionChange.bind(this);\n      this._onComponentRef = this._onComponentRef.bind(this);\n    }\n\n    componentDidMount() {\n      this._bindPosition(this.props);\n    }\n\n    componentWillUnmount() {\n      this._positionListener && this._positionListener.remove();\n    }\n\n    componentWillReceiveProps(nextProps) {\n      this._bindPosition(nextProps);\n    }\n\n    render() {\n      this._pointerEvents = this._computePointerEvents();\n      return (\n        <Component\n          {...this.props}\n          pointerEvents={this._pointerEvents}\n          onComponentRef={this._onComponentRef}\n        />\n      );\n    }\n\n    _onComponentRef(component) {\n      this._component = component;\n      if (component) {\n        invariant(\n          typeof component.setNativeProps === 'function',\n          'component must implement method `setNativeProps`'\n        );\n      }\n    }\n\n    _bindPosition(props) {\n      this._positionListener && this._positionListener.remove();\n      this._positionListener = new AnimatedValueSubscription(\n        props.position,\n        this._onPositionChange\n      );\n    }\n\n    _onPositionChange() {\n      if (this._component) {\n        const pointerEvents = this._computePointerEvents();\n        if (this._pointerEvents !== pointerEvents) {\n          this._pointerEvents = pointerEvents;\n          this._component.setNativeProps({ pointerEvents });\n        }\n      }\n    }\n\n    _computePointerEvents() {\n      const { navigation, position, scene } = this.props;\n\n      if (scene.isStale || navigation.state.index !== scene.index) {\n        // The scene isn't focused.\n        return scene.index > navigation.state.index ? 'box-only' : 'none';\n      }\n\n      const offset = position.__getAnimatedValue() - navigation.state.index;\n      if (Math.abs(offset) > MIN_POSITION_OFFSET) {\n        // The positon is still away from scene's index.\n        // Scene's children should not receive touches until the position\n        // is close enough to scene's index.\n        return 'box-only';\n      }\n\n      return 'auto';\n    }\n  }\n  return Container;\n}\n"]},"metadata":{},"sourceType":"module"}