{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nvar _jsxFileName = \"/Users/felipe/projects/test-react/node_modules/react-navigation/src/views/Drawer/DrawerNavigatorItems.js\";\nimport React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport SafeAreaView from 'react-native-safe-area-view';\nimport TouchableItem from \"../TouchableItem\";\n\nvar DrawerNavigatorItems = function DrawerNavigatorItems(_ref) {\n  var _ref$navigation = _ref.navigation,\n      state = _ref$navigation.state,\n      navigate = _ref$navigation.navigate,\n      items = _ref.items,\n      activeItemKey = _ref.activeItemKey,\n      activeTintColor = _ref.activeTintColor,\n      activeBackgroundColor = _ref.activeBackgroundColor,\n      inactiveTintColor = _ref.inactiveTintColor,\n      inactiveBackgroundColor = _ref.inactiveBackgroundColor,\n      getLabel = _ref.getLabel,\n      renderIcon = _ref.renderIcon,\n      onItemPress = _ref.onItemPress,\n      itemsContainerStyle = _ref.itemsContainerStyle,\n      itemStyle = _ref.itemStyle,\n      labelStyle = _ref.labelStyle,\n      activeLabelStyle = _ref.activeLabelStyle,\n      inactiveLabelStyle = _ref.inactiveLabelStyle,\n      iconContainerStyle = _ref.iconContainerStyle,\n      drawerPosition = _ref.drawerPosition;\n  return React.createElement(View, {\n    style: [styles.container, itemsContainerStyle],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 3\n    }\n  }, items.map(function (route, index) {\n    var _ref2;\n\n    var focused = activeItemKey === route.key;\n    var color = focused ? activeTintColor : inactiveTintColor;\n    var backgroundColor = focused ? activeBackgroundColor : inactiveBackgroundColor;\n    var scene = {\n      route: route,\n      index: index,\n      focused: focused,\n      tintColor: color\n    };\n    var icon = renderIcon(scene);\n    var label = getLabel(scene);\n    var extraLabelStyle = focused ? activeLabelStyle : inactiveLabelStyle;\n    return React.createElement(TouchableItem, {\n      key: route.key,\n      onPress: function onPress() {\n        onItemPress({\n          route: route,\n          focused: focused\n        });\n      },\n      delayPressIn: 0,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 9\n      }\n    }, React.createElement(SafeAreaView, {\n      style: {\n        backgroundColor: backgroundColor\n      },\n      forceInset: (_ref2 = {}, _defineProperty(_ref2, drawerPosition, 'always'), _defineProperty(_ref2, drawerPosition === 'left' ? 'right' : 'left', 'never'), _defineProperty(_ref2, \"vertical\", 'never'), _ref2),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 11\n      }\n    }, React.createElement(View, {\n      style: [styles.item, itemStyle],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 13\n      }\n    }, icon ? React.createElement(View, {\n      style: [styles.icon, focused ? null : styles.inactiveIcon, iconContainerStyle],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 17\n      }\n    }, icon) : null, typeof label === 'string' ? React.createElement(Text, {\n      style: [styles.label, {\n        color: color\n      }, labelStyle, extraLabelStyle],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 17\n      }\n    }, label) : label)));\n  }));\n};\n\nDrawerNavigatorItems.defaultProps = {\n  activeTintColor: '#2196f3',\n  activeBackgroundColor: 'rgba(0, 0, 0, .04)',\n  inactiveTintColor: 'rgba(0, 0, 0, .87)',\n  inactiveBackgroundColor: 'transparent'\n};\nvar styles = StyleSheet.create({\n  container: {\n    paddingVertical: 4\n  },\n  item: {\n    flexDirection: 'row',\n    alignItems: 'center'\n  },\n  icon: {\n    marginHorizontal: 16,\n    width: 24,\n    alignItems: 'center'\n  },\n  inactiveIcon: {\n    opacity: 0.62\n  },\n  label: {\n    margin: 16,\n    fontWeight: 'bold'\n  }\n});\nexport default DrawerNavigatorItems;","map":{"version":3,"sources":["/Users/felipe/projects/test-react/node_modules/react-navigation/src/views/Drawer/DrawerNavigatorItems.js"],"names":["React","SafeAreaView","TouchableItem","DrawerNavigatorItems","navigation","state","navigate","items","activeItemKey","activeTintColor","activeBackgroundColor","inactiveTintColor","inactiveBackgroundColor","getLabel","renderIcon","onItemPress","itemsContainerStyle","itemStyle","labelStyle","activeLabelStyle","inactiveLabelStyle","iconContainerStyle","drawerPosition","styles","container","map","route","index","focused","key","color","backgroundColor","scene","tintColor","icon","label","extraLabelStyle","item","inactiveIcon","defaultProps","StyleSheet","create","paddingVertical","flexDirection","alignItems","marginHorizontal","width","opacity","margin","fontWeight"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { View, Text, Platform, StyleSheet } from 'react-native';\nimport SafeAreaView from 'react-native-safe-area-view';\n\nimport TouchableItem from '../TouchableItem';\n\n/**\n * Component that renders the navigation list in the drawer.\n */\nconst DrawerNavigatorItems = ({\n  navigation: { state, navigate },\n  items,\n  activeItemKey,\n  activeTintColor,\n  activeBackgroundColor,\n  inactiveTintColor,\n  inactiveBackgroundColor,\n  getLabel,\n  renderIcon,\n  onItemPress,\n  itemsContainerStyle,\n  itemStyle,\n  labelStyle,\n  activeLabelStyle,\n  inactiveLabelStyle,\n  iconContainerStyle,\n  drawerPosition,\n}) => (\n  <View style={[styles.container, itemsContainerStyle]}>\n    {items.map((route, index) => {\n      const focused = activeItemKey === route.key;\n      const color = focused ? activeTintColor : inactiveTintColor;\n      const backgroundColor = focused\n        ? activeBackgroundColor\n        : inactiveBackgroundColor;\n      const scene = { route, index, focused, tintColor: color };\n      const icon = renderIcon(scene);\n      const label = getLabel(scene);\n      const extraLabelStyle = focused ? activeLabelStyle : inactiveLabelStyle;\n      return (\n        <TouchableItem\n          key={route.key}\n          onPress={() => {\n            onItemPress({ route, focused });\n          }}\n          delayPressIn={0}\n        >\n          <SafeAreaView\n            style={{ backgroundColor }}\n            forceInset={{\n              [drawerPosition]: 'always',\n              [drawerPosition === 'left' ? 'right' : 'left']: 'never',\n              vertical: 'never',\n            }}\n          >\n            <View style={[styles.item, itemStyle]}>\n              {icon ? (\n                <View\n                  style={[\n                    styles.icon,\n                    focused ? null : styles.inactiveIcon,\n                    iconContainerStyle,\n                  ]}\n                >\n                  {icon}\n                </View>\n              ) : null}\n              {typeof label === 'string' ? (\n                <Text\n                  style={[styles.label, { color }, labelStyle, extraLabelStyle]}\n                >\n                  {label}\n                </Text>\n              ) : (\n                label\n              )}\n            </View>\n          </SafeAreaView>\n        </TouchableItem>\n      );\n    })}\n  </View>\n);\n\n/* Material design specs - https://material.io/guidelines/patterns/navigation-drawer.html#navigation-drawer-specs */\nDrawerNavigatorItems.defaultProps = {\n  activeTintColor: '#2196f3',\n  activeBackgroundColor: 'rgba(0, 0, 0, .04)',\n  inactiveTintColor: 'rgba(0, 0, 0, .87)',\n  inactiveBackgroundColor: 'transparent',\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    paddingVertical: 4,\n  },\n  item: {\n    flexDirection: 'row',\n    alignItems: 'center',\n  },\n  icon: {\n    marginHorizontal: 16,\n    width: 24,\n    alignItems: 'center',\n  },\n  inactiveIcon: {\n    /*\n     * Icons have 0.54 opacity according to guidelines\n     * 100/87 * 54 ~= 62\n     */\n    opacity: 0.62,\n  },\n  label: {\n    margin: 16,\n    fontWeight: 'bold',\n  },\n});\n\nexport default DrawerNavigatorItems;\n"]},"metadata":{},"sourceType":"module"}