{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport invariant from \"../utils/invariant\";\nimport getScreenForRouteName from \"./getScreenForRouteName\";\nimport addNavigationHelpers from \"../addNavigationHelpers\";\nimport validateScreenOptions from \"./validateScreenOptions\";\nimport getChildEventSubscriber from \"../getChildEventSubscriber\";\n\nfunction applyConfig(configurer, navigationOptions, configProps) {\n  if (typeof configurer === 'function') {\n    return _objectSpread(_objectSpread({}, navigationOptions), configurer(_objectSpread(_objectSpread({}, configProps), {}, {\n      navigationOptions: navigationOptions\n    })));\n  }\n\n  if (typeof configurer === 'object') {\n    return _objectSpread(_objectSpread({}, navigationOptions), configurer);\n  }\n\n  return navigationOptions;\n}\n\nexport default (function (routeConfigs, navigatorScreenConfig) {\n  return function (navigation, screenProps) {\n    var state = navigation.state,\n        dispatch = navigation.dispatch;\n    var route = state;\n    invariant(route.routeName && typeof route.routeName === 'string', 'Cannot get config because the route does not have a routeName.');\n    var Component = getScreenForRouteName(routeConfigs, route.routeName);\n    var outputConfig = {};\n    var router = Component.router;\n\n    if (router) {\n      var routes = route.routes,\n          index = route.index;\n\n      if (!route || !routes || index == null) {\n        throw new Error(\"Expect nav state to have routes and index, \" + JSON.stringify(route));\n      }\n\n      var childRoute = routes[index];\n      var childNavigation = addNavigationHelpers({\n        state: childRoute,\n        dispatch: dispatch,\n        addListener: getChildEventSubscriber(navigation.addListener, childRoute.key)\n      });\n      outputConfig = router.getScreenOptions(childNavigation, screenProps);\n    }\n\n    var routeConfig = routeConfigs[route.routeName];\n    var routeScreenConfig = routeConfig.navigationOptions;\n    var componentScreenConfig = Component.navigationOptions;\n    var configOptions = {\n      navigation: navigation,\n      screenProps: screenProps || {}\n    };\n    outputConfig = applyConfig(navigatorScreenConfig, outputConfig, configOptions);\n    outputConfig = applyConfig(componentScreenConfig, outputConfig, configOptions);\n    outputConfig = applyConfig(routeScreenConfig, outputConfig, configOptions);\n    validateScreenOptions(outputConfig, route);\n    return outputConfig;\n  };\n});","map":{"version":3,"sources":["/Users/felipe/projects/lucy-farm/AwesomeProject/node_modules/react-navigation/src/routers/createConfigGetter.js"],"names":["invariant","getScreenForRouteName","addNavigationHelpers","validateScreenOptions","getChildEventSubscriber","applyConfig","configurer","navigationOptions","configProps","routeConfigs","navigatorScreenConfig","navigation","screenProps","state","dispatch","route","routeName","Component","outputConfig","router","routes","index","Error","JSON","stringify","childRoute","childNavigation","addListener","key","getScreenOptions","routeConfig","routeScreenConfig","componentScreenConfig","configOptions"],"mappings":";;;;;;AAAA,OAAOA,SAAP;AAEA,OAAOC,qBAAP;AACA,OAAOC,oBAAP;AACA,OAAOC,qBAAP;AACA,OAAOC,uBAAP;;AAEA,SAASC,WAAT,CAAqBC,UAArB,EAAiCC,iBAAjC,EAAoDC,WAApD,EAAiE;AAC/D,MAAI,OAAOF,UAAP,KAAsB,UAA1B,EAAsC;AACpC,2CACKC,iBADL,GAEKD,UAAU,iCACRE,WADQ;AAEXD,MAAAA,iBAAiB,EAAjBA;AAFW,OAFf;AAOD;;AACD,MAAI,OAAOD,UAAP,KAAsB,QAA1B,EAAoC;AAClC,2CACKC,iBADL,GAEKD,UAFL;AAID;;AACD,SAAOC,iBAAP;AACD;;AAED,gBAAe,UAACE,YAAD,EAAeC,qBAAf;AAAA,SAAyC,UACtDC,UADsD,EAEtDC,WAFsD,EAGnD;AAAA,QACKC,KADL,GACyBF,UADzB,CACKE,KADL;AAAA,QACYC,QADZ,GACyBH,UADzB,CACYG,QADZ;AAEH,QAAMC,KAAK,GAAGF,KAAd;AAEAb,IAAAA,SAAS,CACPe,KAAK,CAACC,SAAN,IAAmB,OAAOD,KAAK,CAACC,SAAb,KAA2B,QADvC,EAEP,gEAFO,CAAT;AAKA,QAAMC,SAAS,GAAGhB,qBAAqB,CAACQ,YAAD,EAAeM,KAAK,CAACC,SAArB,CAAvC;AAEA,QAAIE,YAAY,GAAG,EAAnB;AAEA,QAAMC,MAAM,GAAGF,SAAS,CAACE,MAAzB;;AACA,QAAIA,MAAJ,EAAY;AAAA,UACFC,MADE,GACgBL,KADhB,CACFK,MADE;AAAA,UACMC,KADN,GACgBN,KADhB,CACMM,KADN;;AAEV,UAAI,CAACN,KAAD,IAAU,CAACK,MAAX,IAAqBC,KAAK,IAAI,IAAlC,EAAwC;AACtC,cAAM,IAAIC,KAAJ,iDAC0CC,IAAI,CAACC,SAAL,CAAeT,KAAf,CAD1C,CAAN;AAGD;;AACD,UAAMU,UAAU,GAAGL,MAAM,CAACC,KAAD,CAAzB;AACA,UAAMK,eAAe,GAAGxB,oBAAoB,CAAC;AAC3CW,QAAAA,KAAK,EAAEY,UADoC;AAE3CX,QAAAA,QAAQ,EAARA,QAF2C;AAG3Ca,QAAAA,WAAW,EAAEvB,uBAAuB,CAClCO,UAAU,CAACgB,WADuB,EAElCF,UAAU,CAACG,GAFuB;AAHO,OAAD,CAA5C;AAQAV,MAAAA,YAAY,GAAGC,MAAM,CAACU,gBAAP,CAAwBH,eAAxB,EAAyCd,WAAzC,CAAf;AACD;;AAED,QAAMkB,WAAW,GAAGrB,YAAY,CAACM,KAAK,CAACC,SAAP,CAAhC;AAEA,QAAMe,iBAAiB,GAAGD,WAAW,CAACvB,iBAAtC;AACA,QAAMyB,qBAAqB,GAAGf,SAAS,CAACV,iBAAxC;AAEA,QAAM0B,aAAa,GAAG;AAAEtB,MAAAA,UAAU,EAAVA,UAAF;AAAcC,MAAAA,WAAW,EAAEA,WAAW,IAAI;AAA1C,KAAtB;AAEAM,IAAAA,YAAY,GAAGb,WAAW,CACxBK,qBADwB,EAExBQ,YAFwB,EAGxBe,aAHwB,CAA1B;AAKAf,IAAAA,YAAY,GAAGb,WAAW,CACxB2B,qBADwB,EAExBd,YAFwB,EAGxBe,aAHwB,CAA1B;AAKAf,IAAAA,YAAY,GAAGb,WAAW,CAAC0B,iBAAD,EAAoBb,YAApB,EAAkCe,aAAlC,CAA1B;AAEA9B,IAAAA,qBAAqB,CAACe,YAAD,EAAeH,KAAf,CAArB;AAEA,WAAOG,YAAP;AACD,GA1Dc;AAAA,CAAf","sourcesContent":["import invariant from '../utils/invariant';\n\nimport getScreenForRouteName from './getScreenForRouteName';\nimport addNavigationHelpers from '../addNavigationHelpers';\nimport validateScreenOptions from './validateScreenOptions';\nimport getChildEventSubscriber from '../getChildEventSubscriber';\n\nfunction applyConfig(configurer, navigationOptions, configProps) {\n  if (typeof configurer === 'function') {\n    return {\n      ...navigationOptions,\n      ...configurer({\n        ...configProps,\n        navigationOptions,\n      }),\n    };\n  }\n  if (typeof configurer === 'object') {\n    return {\n      ...navigationOptions,\n      ...configurer,\n    };\n  }\n  return navigationOptions;\n}\n\nexport default (routeConfigs, navigatorScreenConfig) => (\n  navigation,\n  screenProps\n) => {\n  const { state, dispatch } = navigation;\n  const route = state;\n\n  invariant(\n    route.routeName && typeof route.routeName === 'string',\n    'Cannot get config because the route does not have a routeName.'\n  );\n\n  const Component = getScreenForRouteName(routeConfigs, route.routeName);\n\n  let outputConfig = {};\n\n  const router = Component.router;\n  if (router) {\n    const { routes, index } = route;\n    if (!route || !routes || index == null) {\n      throw new Error(\n        `Expect nav state to have routes and index, ${JSON.stringify(route)}`\n      );\n    }\n    const childRoute = routes[index];\n    const childNavigation = addNavigationHelpers({\n      state: childRoute,\n      dispatch,\n      addListener: getChildEventSubscriber(\n        navigation.addListener,\n        childRoute.key\n      ),\n    });\n    outputConfig = router.getScreenOptions(childNavigation, screenProps);\n  }\n\n  const routeConfig = routeConfigs[route.routeName];\n\n  const routeScreenConfig = routeConfig.navigationOptions;\n  const componentScreenConfig = Component.navigationOptions;\n\n  const configOptions = { navigation, screenProps: screenProps || {} };\n\n  outputConfig = applyConfig(\n    navigatorScreenConfig,\n    outputConfig,\n    configOptions\n  );\n  outputConfig = applyConfig(\n    componentScreenConfig,\n    outputConfig,\n    configOptions\n  );\n  outputConfig = applyConfig(routeScreenConfig, outputConfig, configOptions);\n\n  validateScreenOptions(outputConfig, route);\n\n  return outputConfig;\n};\n"]},"metadata":{},"sourceType":"module"}