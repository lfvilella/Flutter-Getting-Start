{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nvar _jsxFileName = \"/Users/felipe/projects/lucy-farm/AwesomeProject/node_modules/react-navigation/src/navigators/TabNavigator.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from 'react';\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport createNavigator from \"./createNavigator\";\nimport createNavigationContainer from \"../createNavigationContainer\";\nimport TabRouter from \"../routers/TabRouter\";\nimport TabView from \"../views/TabView/TabView\";\nimport TabBarTop from \"../views/TabView/TabBarTop\";\nimport TabBarBottom from \"../views/TabView/TabBarBottom\";\n\nvar TabNavigator = function TabNavigator(routeConfigs) {\n  var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  var mergedConfig = _objectSpread(_objectSpread({}, TabNavigator.Presets.Default), config);\n\n  var tabBarComponent = mergedConfig.tabBarComponent,\n      tabBarPosition = mergedConfig.tabBarPosition,\n      tabBarOptions = mergedConfig.tabBarOptions,\n      lazy = mergedConfig.lazy,\n      removeClippedSubviews = mergedConfig.removeClippedSubviews,\n      swipeEnabled = mergedConfig.swipeEnabled,\n      animationEnabled = mergedConfig.animationEnabled,\n      configureTransition = mergedConfig.configureTransition,\n      initialLayout = mergedConfig.initialLayout,\n      tabsConfig = _objectWithoutProperties(mergedConfig, [\"tabBarComponent\", \"tabBarPosition\", \"tabBarOptions\", \"lazy\", \"removeClippedSubviews\", \"swipeEnabled\", \"animationEnabled\", \"configureTransition\", \"initialLayout\"]);\n\n  var router = TabRouter(routeConfigs, tabsConfig);\n  var navigator = createNavigator(router, routeConfigs, config)(function (props) {\n    return React.createElement(TabView, _extends({}, props, {\n      lazy: lazy,\n      removeClippedSubviews: removeClippedSubviews,\n      tabBarComponent: tabBarComponent,\n      tabBarPosition: tabBarPosition,\n      tabBarOptions: tabBarOptions,\n      swipeEnabled: swipeEnabled,\n      animationEnabled: animationEnabled,\n      configureTransition: configureTransition,\n      initialLayout: initialLayout,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 5\n      }\n    }));\n  });\n  return createNavigationContainer(navigator);\n};\n\nvar Presets = {\n  iOSBottomTabs: {\n    tabBarComponent: TabBarBottom,\n    tabBarPosition: 'bottom',\n    swipeEnabled: false,\n    animationEnabled: false,\n    initialLayout: undefined\n  },\n  AndroidTopTabs: {\n    tabBarComponent: TabBarTop,\n    tabBarPosition: 'top',\n    swipeEnabled: true,\n    animationEnabled: true,\n    initialLayout: undefined\n  }\n};\nTabNavigator.Presets = {\n  iOSBottomTabs: Presets.iOSBottomTabs,\n  AndroidTopTabs: Presets.AndroidTopTabs,\n  Default: Platform.OS === 'ios' ? Presets.iOSBottomTabs : Presets.AndroidTopTabs\n};\nexport default TabNavigator;","map":{"version":3,"sources":["/Users/felipe/projects/lucy-farm/AwesomeProject/node_modules/react-navigation/src/navigators/TabNavigator.js"],"names":["React","createNavigator","createNavigationContainer","TabRouter","TabView","TabBarTop","TabBarBottom","TabNavigator","routeConfigs","config","mergedConfig","Presets","Default","tabBarComponent","tabBarPosition","tabBarOptions","lazy","removeClippedSubviews","swipeEnabled","animationEnabled","configureTransition","initialLayout","tabsConfig","router","navigator","props","iOSBottomTabs","undefined","AndroidTopTabs","Platform","OS"],"mappings":";;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAGA,OAAOC,eAAP;AACA,OAAOC,yBAAP;AACA,OAAOC,SAAP;AACA,OAAOC,OAAP;AACA,OAAOC,SAAP;AACA,OAAOC,YAAP;;AAMA,IAAMC,YAAY,GAAG,SAAfA,YAAe,CAACC,YAAD,EAA+B;AAAA,MAAhBC,MAAgB,uEAAP,EAAO;;AAElD,MAAMC,YAAY,mCAAQH,YAAY,CAACI,OAAb,CAAqBC,OAA7B,GAAyCH,MAAzC,CAAlB;;AAFkD,MAIhDI,eAJgD,GAc9CH,YAd8C,CAIhDG,eAJgD;AAAA,MAKhDC,cALgD,GAc9CJ,YAd8C,CAKhDI,cALgD;AAAA,MAMhDC,aANgD,GAc9CL,YAd8C,CAMhDK,aANgD;AAAA,MAOhDC,IAPgD,GAc9CN,YAd8C,CAOhDM,IAPgD;AAAA,MAQhDC,qBARgD,GAc9CP,YAd8C,CAQhDO,qBARgD;AAAA,MAShDC,YATgD,GAc9CR,YAd8C,CAShDQ,YATgD;AAAA,MAUhDC,gBAVgD,GAc9CT,YAd8C,CAUhDS,gBAVgD;AAAA,MAWhDC,mBAXgD,GAc9CV,YAd8C,CAWhDU,mBAXgD;AAAA,MAYhDC,aAZgD,GAc9CX,YAd8C,CAYhDW,aAZgD;AAAA,MAa7CC,UAb6C,4BAc9CZ,YAd8C;;AAgBlD,MAAMa,MAAM,GAAGpB,SAAS,CAACK,YAAD,EAAec,UAAf,CAAxB;AAEA,MAAME,SAAS,GAAGvB,eAAe,CAACsB,MAAD,EAASf,YAAT,EAAuBC,MAAvB,CAAf,CAA8C,UAAAgB,KAAK;AAAA,WACnE,oBAAC,OAAD,eACMA,KADN;AAEE,MAAA,IAAI,EAAET,IAFR;AAGE,MAAA,qBAAqB,EAAEC,qBAHzB;AAIE,MAAA,eAAe,EAAEJ,eAJnB;AAKE,MAAA,cAAc,EAAEC,cALlB;AAME,MAAA,aAAa,EAAEC,aANjB;AAOE,MAAA,YAAY,EAAEG,YAPhB;AAQE,MAAA,gBAAgB,EAAEC,gBARpB;AASE,MAAA,mBAAmB,EAAEC,mBATvB;AAUE,MAAA,aAAa,EAAEC,aAVjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OADmE;AAAA,GAAnD,CAAlB;AAeA,SAAOnB,yBAAyB,CAACsB,SAAD,CAAhC;AACD,CAlCD;;AAoCA,IAAMb,OAAO,GAAG;AACde,EAAAA,aAAa,EAAE;AACbb,IAAAA,eAAe,EAAEP,YADJ;AAEbQ,IAAAA,cAAc,EAAE,QAFH;AAGbI,IAAAA,YAAY,EAAE,KAHD;AAIbC,IAAAA,gBAAgB,EAAE,KAJL;AAKbE,IAAAA,aAAa,EAAEM;AALF,GADD;AAQdC,EAAAA,cAAc,EAAE;AACdf,IAAAA,eAAe,EAAER,SADH;AAEdS,IAAAA,cAAc,EAAE,KAFF;AAGdI,IAAAA,YAAY,EAAE,IAHA;AAIdC,IAAAA,gBAAgB,EAAE,IAJJ;AAKdE,IAAAA,aAAa,EAAEM;AALD;AARF,CAAhB;AAmCApB,YAAY,CAACI,OAAb,GAAuB;AACrBe,EAAAA,aAAa,EAAEf,OAAO,CAACe,aADF;AAErBE,EAAAA,cAAc,EAAEjB,OAAO,CAACiB,cAFH;AAGrBhB,EAAAA,OAAO,EACLiB,QAAQ,CAACC,EAAT,KAAgB,KAAhB,GAAwBnB,OAAO,CAACe,aAAhC,GAAgDf,OAAO,CAACiB;AAJrC,CAAvB;AAOA,eAAerB,YAAf","sourcesContent":["import React from 'react';\nimport { Platform } from 'react-native';\n\nimport createNavigator from './createNavigator';\nimport createNavigationContainer from '../createNavigationContainer';\nimport TabRouter from '../routers/TabRouter';\nimport TabView from '../views/TabView/TabView';\nimport TabBarTop from '../views/TabView/TabBarTop';\nimport TabBarBottom from '../views/TabView/TabBarBottom';\n\n// A tab navigators props are the intersection between\n// the base navigator props (navgiation, screenProps, etc)\n// and the view's props\n\nconst TabNavigator = (routeConfigs, config = {}) => {\n  // Use the look native to the platform by default\n  const mergedConfig = { ...TabNavigator.Presets.Default, ...config };\n  const {\n    tabBarComponent,\n    tabBarPosition,\n    tabBarOptions,\n    lazy,\n    removeClippedSubviews,\n    swipeEnabled,\n    animationEnabled,\n    configureTransition,\n    initialLayout,\n    ...tabsConfig\n  } = mergedConfig;\n\n  const router = TabRouter(routeConfigs, tabsConfig);\n\n  const navigator = createNavigator(router, routeConfigs, config)(props => (\n    <TabView\n      {...props}\n      lazy={lazy}\n      removeClippedSubviews={removeClippedSubviews}\n      tabBarComponent={tabBarComponent}\n      tabBarPosition={tabBarPosition}\n      tabBarOptions={tabBarOptions}\n      swipeEnabled={swipeEnabled}\n      animationEnabled={animationEnabled}\n      configureTransition={configureTransition}\n      initialLayout={initialLayout}\n    />\n  ));\n\n  return createNavigationContainer(navigator);\n};\n\nconst Presets = {\n  iOSBottomTabs: {\n    tabBarComponent: TabBarBottom,\n    tabBarPosition: 'bottom',\n    swipeEnabled: false,\n    animationEnabled: false,\n    initialLayout: undefined,\n  },\n  AndroidTopTabs: {\n    tabBarComponent: TabBarTop,\n    tabBarPosition: 'top',\n    swipeEnabled: true,\n    animationEnabled: true,\n    initialLayout: undefined,\n  },\n};\n\n/**\n * Use these to get Android-style top tabs even on iOS or vice versa.\n *\n * Example:\n * ```\n * const HomeScreenTabNavigator = TabNavigator({\n *  Chat: {\n *    screen: ChatScreen,\n *  },\n *  ...\n * }, {\n *  ...TabNavigator.Presets.AndroidTopTabs,\n *  tabBarOptions: {\n *    ...\n *  },\n * });\n *```\n */\nTabNavigator.Presets = {\n  iOSBottomTabs: Presets.iOSBottomTabs,\n  AndroidTopTabs: Presets.AndroidTopTabs,\n  Default:\n    Platform.OS === 'ios' ? Presets.iOSBottomTabs : Presets.AndroidTopTabs,\n};\n\nexport default TabNavigator;\n"]},"metadata":{},"sourceType":"module"}