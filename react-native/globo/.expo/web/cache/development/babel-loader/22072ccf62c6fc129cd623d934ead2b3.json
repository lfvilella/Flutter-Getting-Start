{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"/Users/felipe/projects/test-react/node_modules/react-navigation/src/views/withNavigationFocus.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from 'react';\nimport propTypes from 'prop-types';\nimport hoistStatics from 'hoist-non-react-statics';\nimport invariant from \"../utils/invariant\";\nexport default function withNavigationFocus(Component) {\n  var ComponentWithNavigationFocus = function (_React$Component) {\n    _inherits(ComponentWithNavigationFocus, _React$Component);\n\n    var _super = _createSuper(ComponentWithNavigationFocus);\n\n    function ComponentWithNavigationFocus(_props, _context) {\n      var _this;\n\n      _classCallCheck(this, ComponentWithNavigationFocus);\n\n      _this = _super.call(this);\n\n      _this.getNavigation = function () {\n        var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _this.props;\n        var context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _this.context;\n        var navigation = props.navigation || context.navigation;\n        invariant(!!navigation, 'withNavigationFocus can only be used on a view hierarchy of a navigator. The wrapped component is unable to get access to navigation from props or context.');\n        return navigation;\n      };\n\n      _this.state = {\n        isFocused: _this.getNavigation(_props, _context).isFocused()\n      };\n      return _this;\n    }\n\n    _createClass(ComponentWithNavigationFocus, [{\n      key: \"componentDidMount\",\n      value: function componentDidMount() {\n        var _this2 = this;\n\n        var navigation = this.getNavigation();\n        this.subscriptions = [navigation.addListener('didFocus', function () {\n          return _this2.setState({\n            isFocused: true\n          });\n        }), navigation.addListener('willBlur', function () {\n          return _this2.setState({\n            isFocused: false\n          });\n        })];\n      }\n    }, {\n      key: \"componentWillUnmount\",\n      value: function componentWillUnmount() {\n        this.subscriptions.forEach(function (sub) {\n          return sub.remove();\n        });\n      }\n    }, {\n      key: \"render\",\n      value: function render() {\n        return React.createElement(Component, _extends({}, this.props, {\n          isFocused: this.state.isFocused,\n          ref: this.props.onRef,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 50,\n            columnNumber: 9\n          }\n        }));\n      }\n    }]);\n\n    return ComponentWithNavigationFocus;\n  }(React.Component);\n\n  ComponentWithNavigationFocus.displayName = \"withNavigationFocus(\" + (Component.displayName || Component.name) + \")\";\n  ComponentWithNavigationFocus.contextTypes = {\n    navigation: propTypes.object.isRequired\n  };\n  return hoistStatics(ComponentWithNavigationFocus, Component);\n}","map":{"version":3,"sources":["/Users/felipe/projects/test-react/node_modules/react-navigation/src/views/withNavigationFocus.js"],"names":["React","propTypes","hoistStatics","invariant","withNavigationFocus","Component","ComponentWithNavigationFocus","props","context","getNavigation","navigation","state","isFocused","subscriptions","addListener","setState","forEach","sub","remove","onRef","displayName","name","contextTypes","object","isRequired"],"mappings":";;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,YAAP,MAAyB,yBAAzB;AACA,OAAOC,SAAP;AAEA,eAAe,SAASC,mBAAT,CAA6BC,SAA7B,EAAwC;AAAA,MAC/CC,4BAD+C;AAAA;;AAAA;;AASnD,0CAAYC,MAAZ,EAAmBC,QAAnB,EAA4B;AAAA;;AAAA;;AAC1B;;AAD0B,YAwB5BC,aAxB4B,GAwBZ,YAAgD;AAAA,YAA/CF,KAA+C,uEAAvC,MAAKA,KAAkC;AAAA,YAA3BC,OAA2B,uEAAjB,MAAKA,OAAY;AAC9D,YAAME,UAAU,GAAGH,KAAK,CAACG,UAAN,IAAoBF,OAAO,CAACE,UAA/C;AACAP,QAAAA,SAAS,CACP,CAAC,CAACO,UADK,EAEP,6JAFO,CAAT;AAIA,eAAOA,UAAP;AACD,OA/B2B;;AAG1B,YAAKC,KAAL,GAAa;AACXC,QAAAA,SAAS,EAAE,MAAKH,aAAL,CAAmBF,MAAnB,EAA0BC,QAA1B,EAAmCI,SAAnC;AADA,OAAb;AAH0B;AAM3B;;AAfkD;AAAA;AAAA,0CAiB/B;AAAA;;AAClB,YAAMF,UAAU,GAAG,KAAKD,aAAL,EAAnB;AACA,aAAKI,aAAL,GAAqB,CACnBH,UAAU,CAACI,WAAX,CAAuB,UAAvB,EAAmC;AAAA,iBACjC,MAAI,CAACC,QAAL,CAAc;AAAEH,YAAAA,SAAS,EAAE;AAAb,WAAd,CADiC;AAAA,SAAnC,CADmB,EAInBF,UAAU,CAACI,WAAX,CAAuB,UAAvB,EAAmC;AAAA,iBACjC,MAAI,CAACC,QAAL,CAAc;AAAEH,YAAAA,SAAS,EAAE;AAAb,WAAd,CADiC;AAAA,SAAnC,CAJmB,CAArB;AAQD;AA3BkD;AAAA;AAAA,6CA6B5B;AACrB,aAAKC,aAAL,CAAmBG,OAAnB,CAA2B,UAAAC,GAAG;AAAA,iBAAIA,GAAG,CAACC,MAAJ,EAAJ;AAAA,SAA9B;AACD;AA/BkD;AAAA;AAAA,+BA0C1C;AACP,eACE,oBAAC,SAAD,eACM,KAAKX,KADX;AAEE,UAAA,SAAS,EAAE,KAAKI,KAAL,CAAWC,SAFxB;AAGE,UAAA,GAAG,EAAE,KAAKL,KAAL,CAAWY,KAHlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WADF;AAOD;AAlDkD;;AAAA;AAAA,IACVnB,KAAK,CAACK,SADI;;AAC/CC,EAAAA,4BAD+C,CAE5Cc,WAF4C,6BAEPf,SAAS,CAACe,WAAV,IAC1Cf,SAAS,CAACgB,IAHuC;AAC/Cf,EAAAA,4BAD+C,CAK5CgB,YAL4C,GAK7B;AACpBZ,IAAAA,UAAU,EAAET,SAAS,CAACsB,MAAV,CAAiBC;AADT,GAL6B;AAqDrD,SAAOtB,YAAY,CAACI,4BAAD,EAA+BD,SAA/B,CAAnB;AACD","sourcesContent":["import React from 'react';\nimport propTypes from 'prop-types';\nimport hoistStatics from 'hoist-non-react-statics';\nimport invariant from '../utils/invariant';\n\nexport default function withNavigationFocus(Component) {\n  class ComponentWithNavigationFocus extends React.Component {\n    static displayName = `withNavigationFocus(${Component.displayName ||\n      Component.name})`;\n\n    static contextTypes = {\n      navigation: propTypes.object.isRequired,\n    };\n\n    constructor(props, context) {\n      super();\n\n      this.state = {\n        isFocused: this.getNavigation(props, context).isFocused(),\n      };\n    }\n\n    componentDidMount() {\n      const navigation = this.getNavigation();\n      this.subscriptions = [\n        navigation.addListener('didFocus', () =>\n          this.setState({ isFocused: true })\n        ),\n        navigation.addListener('willBlur', () =>\n          this.setState({ isFocused: false })\n        ),\n      ];\n    }\n\n    componentWillUnmount() {\n      this.subscriptions.forEach(sub => sub.remove());\n    }\n\n    getNavigation = (props = this.props, context = this.context) => {\n      const navigation = props.navigation || context.navigation;\n      invariant(\n        !!navigation,\n        'withNavigationFocus can only be used on a view hierarchy of a navigator. The wrapped component is unable to get access to navigation from props or context.'\n      );\n      return navigation;\n    };\n\n    render() {\n      return (\n        <Component\n          {...this.props}\n          isFocused={this.state.isFocused}\n          ref={this.props.onRef}\n        />\n      );\n    }\n  }\n\n  return hoistStatics(ComponentWithNavigationFocus, Component);\n}\n"]},"metadata":{},"sourceType":"module"}