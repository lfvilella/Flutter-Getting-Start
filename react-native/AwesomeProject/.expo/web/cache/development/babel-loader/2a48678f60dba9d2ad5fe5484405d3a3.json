{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"/Users/felipe/projects/lucy-farm/AwesomeProject/node_modules/react-navigation/src/views/Transitioner.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from 'react';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport Easing from \"react-native-web/dist/exports/Easing\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport invariant from \"../utils/invariant\";\nimport NavigationScenesReducer from \"./ScenesReducer\";\nvar DefaultTransitionSpec = {\n  duration: 250,\n  easing: Easing.inOut(Easing.ease),\n  timing: Animated.timing\n};\n\nvar Transitioner = function (_React$Component) {\n  _inherits(Transitioner, _React$Component);\n\n  var _super = _createSuper(Transitioner);\n\n  function Transitioner(props, context) {\n    var _this;\n\n    _classCallCheck(this, Transitioner);\n\n    _this = _super.call(this, props, context);\n    var layout = {\n      height: new Animated.Value(0),\n      initHeight: 0,\n      initWidth: 0,\n      isMeasured: false,\n      width: new Animated.Value(0)\n    };\n    _this.state = {\n      layout: layout,\n      position: new Animated.Value(_this.props.navigation.state.index),\n      progress: new Animated.Value(1),\n      scenes: NavigationScenesReducer([], _this.props.navigation.state)\n    };\n    _this._prevTransitionProps = null;\n    _this._transitionProps = buildTransitionProps(props, _this.state);\n    _this._isMounted = false;\n    _this._isTransitionRunning = false;\n    _this._queuedTransition = null;\n    return _this;\n  }\n\n  _createClass(Transitioner, [{\n    key: \"componentWillMount\",\n    value: function componentWillMount() {\n      this._onLayout = this._onLayout.bind(this);\n      this._onTransitionEnd = this._onTransitionEnd.bind(this);\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this._isMounted = true;\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this._isMounted = false;\n    }\n  }, {\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps(nextProps) {\n      var nextScenes = NavigationScenesReducer(this.state.scenes, nextProps.navigation.state, this.props.navigation.state);\n\n      if (nextScenes === this.state.scenes) {\n        return;\n      }\n\n      var indexHasChanged = nextProps.navigation.state.index !== this.props.navigation.state.index;\n\n      if (this._isTransitionRunning) {\n        this._queuedTransition = {\n          nextProps: nextProps,\n          nextScenes: nextScenes,\n          indexHasChanged: indexHasChanged\n        };\n        return;\n      }\n\n      this._startTransition(nextProps, nextScenes, indexHasChanged);\n    }\n  }, {\n    key: \"_startTransition\",\n    value: function _startTransition(nextProps, nextScenes, indexHasChanged) {\n      var _this2 = this;\n\n      var nextState = _objectSpread(_objectSpread({}, this.state), {}, {\n        scenes: nextScenes\n      });\n\n      var position = nextState.position,\n          progress = nextState.progress;\n      progress.setValue(0);\n      this._prevTransitionProps = this._transitionProps;\n      this._transitionProps = buildTransitionProps(nextProps, nextState);\n      var transitionUserSpec = nextProps.configureTransition ? nextProps.configureTransition(this._transitionProps, this._prevTransitionProps) : null;\n\n      var transitionSpec = _objectSpread(_objectSpread({}, DefaultTransitionSpec), transitionUserSpec);\n\n      var timing = transitionSpec.timing;\n      delete transitionSpec.timing;\n      var toValue = nextProps.navigation.state.index;\n      var positionHasChanged = position.__getValue() !== toValue;\n      var animations = indexHasChanged && positionHasChanged ? [timing(progress, _objectSpread(_objectSpread({}, transitionSpec), {}, {\n        toValue: 1\n      })), timing(position, _objectSpread(_objectSpread({}, transitionSpec), {}, {\n        toValue: nextProps.navigation.state.index\n      }))] : [];\n      this._isTransitionRunning = true;\n      this.setState(nextState, function _callee() {\n        var result;\n        return _regeneratorRuntime.async(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (!nextProps.onTransitionStart) {\n                  _context.next = 5;\n                  break;\n                }\n\n                result = nextProps.onTransitionStart(_this2._transitionProps, _this2._prevTransitionProps);\n\n                if (!(result instanceof Promise)) {\n                  _context.next = 5;\n                  break;\n                }\n\n                _context.next = 5;\n                return _regeneratorRuntime.awrap(result);\n\n              case 5:\n                Animated.parallel(animations).start(_this2._onTransitionEnd);\n\n              case 6:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, null, null, null, Promise);\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(View, {\n        onLayout: this._onLayout,\n        style: [styles.main],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 7\n        }\n      }, this.props.render(this._transitionProps, this._prevTransitionProps));\n    }\n  }, {\n    key: \"_onLayout\",\n    value: function _onLayout(event) {\n      var _event$nativeEvent$la = event.nativeEvent.layout,\n          height = _event$nativeEvent$la.height,\n          width = _event$nativeEvent$la.width;\n\n      if (this.state.layout.initWidth === width && this.state.layout.initHeight === height) {\n        return;\n      }\n\n      var layout = _objectSpread(_objectSpread({}, this.state.layout), {}, {\n        initHeight: height,\n        initWidth: width,\n        isMeasured: true\n      });\n\n      layout.height.setValue(height);\n      layout.width.setValue(width);\n\n      var nextState = _objectSpread(_objectSpread({}, this.state), {}, {\n        layout: layout\n      });\n\n      this._transitionProps = buildTransitionProps(this.props, nextState);\n      this.setState(nextState);\n    }\n  }, {\n    key: \"_onTransitionEnd\",\n    value: function _onTransitionEnd() {\n      var _this3 = this;\n\n      if (!this._isMounted) {\n        return;\n      }\n\n      var prevTransitionProps = this._prevTransitionProps;\n      this._prevTransitionProps = null;\n      var scenes = this.state.scenes.filter(isSceneNotStale);\n\n      var nextState = _objectSpread(_objectSpread({}, this.state), {}, {\n        scenes: this.state.scenes.length === scenes.length ? this.state.scenes : scenes\n      });\n\n      this._transitionProps = buildTransitionProps(this.props, nextState);\n      this.setState(nextState, function _callee2() {\n        var result;\n        return _regeneratorRuntime.async(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                if (!_this3.props.onTransitionEnd) {\n                  _context2.next = 5;\n                  break;\n                }\n\n                result = _this3.props.onTransitionEnd(_this3._transitionProps, prevTransitionProps);\n\n                if (!(result instanceof Promise)) {\n                  _context2.next = 5;\n                  break;\n                }\n\n                _context2.next = 5;\n                return _regeneratorRuntime.awrap(result);\n\n              case 5:\n                if (_this3._queuedTransition) {\n                  _this3._startTransition(_this3._queuedTransition.nextProps, _this3._queuedTransition.nextScenes, _this3._queuedTransition.indexHasChanged);\n\n                  _this3._queuedTransition = null;\n                } else {\n                  _this3._isTransitionRunning = false;\n                }\n\n              case 6:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, null, null, null, Promise);\n      });\n    }\n  }]);\n\n  return Transitioner;\n}(React.Component);\n\nfunction buildTransitionProps(props, state) {\n  var navigation = props.navigation;\n  var layout = state.layout,\n      position = state.position,\n      progress = state.progress,\n      scenes = state.scenes;\n  var scene = scenes.find(isSceneActive);\n  invariant(scene, 'Could not find active scene');\n  return {\n    layout: layout,\n    navigation: navigation,\n    position: position,\n    progress: progress,\n    scenes: scenes,\n    scene: scene,\n    index: scene.index\n  };\n}\n\nfunction isSceneNotStale(scene) {\n  return !scene.isStale;\n}\n\nfunction isSceneActive(scene) {\n  return scene.isActive;\n}\n\nvar styles = StyleSheet.create({\n  main: {\n    flex: 1\n  }\n});\nexport default Transitioner;","map":{"version":3,"sources":["/Users/felipe/projects/lucy-farm/AwesomeProject/node_modules/react-navigation/src/views/Transitioner.js"],"names":["React","invariant","NavigationScenesReducer","DefaultTransitionSpec","duration","easing","Easing","inOut","ease","timing","Animated","Transitioner","props","context","layout","height","Value","initHeight","initWidth","isMeasured","width","state","position","navigation","index","progress","scenes","_prevTransitionProps","_transitionProps","buildTransitionProps","_isMounted","_isTransitionRunning","_queuedTransition","_onLayout","bind","_onTransitionEnd","nextProps","nextScenes","indexHasChanged","_startTransition","nextState","setValue","transitionUserSpec","configureTransition","transitionSpec","toValue","positionHasChanged","__getValue","animations","setState","onTransitionStart","result","Promise","parallel","start","styles","main","render","event","nativeEvent","prevTransitionProps","filter","isSceneNotStale","length","onTransitionEnd","Component","scene","find","isSceneActive","isStale","isActive","StyleSheet","create","flex"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Animated, Easing, StyleSheet, View } from 'react-native';\nimport invariant from '../utils/invariant';\n\nimport NavigationScenesReducer from './ScenesReducer';\n\n// Used for all animations unless overriden\nconst DefaultTransitionSpec = {\n  duration: 250,\n  easing: Easing.inOut(Easing.ease),\n  timing: Animated.timing,\n};\n\nclass Transitioner extends React.Component {\n  constructor(props, context) {\n    super(props, context);\n\n    // The initial layout isn't measured. Measured layout will be only available\n    // when the component is mounted.\n    const layout = {\n      height: new Animated.Value(0),\n      initHeight: 0,\n      initWidth: 0,\n      isMeasured: false,\n      width: new Animated.Value(0),\n    };\n\n    this.state = {\n      layout,\n      position: new Animated.Value(this.props.navigation.state.index),\n      progress: new Animated.Value(1),\n      scenes: NavigationScenesReducer([], this.props.navigation.state),\n    };\n\n    this._prevTransitionProps = null;\n    this._transitionProps = buildTransitionProps(props, this.state);\n    this._isMounted = false;\n    this._isTransitionRunning = false;\n    this._queuedTransition = null;\n  }\n\n  componentWillMount() {\n    this._onLayout = this._onLayout.bind(this);\n    this._onTransitionEnd = this._onTransitionEnd.bind(this);\n  }\n\n  componentDidMount() {\n    this._isMounted = true;\n  }\n\n  componentWillUnmount() {\n    this._isMounted = false;\n  }\n\n  componentWillReceiveProps(nextProps) {\n    const nextScenes = NavigationScenesReducer(\n      this.state.scenes,\n      nextProps.navigation.state,\n      this.props.navigation.state\n    );\n\n    if (nextScenes === this.state.scenes) {\n      return;\n    }\n\n    const indexHasChanged =\n      nextProps.navigation.state.index !== this.props.navigation.state.index;\n    if (this._isTransitionRunning) {\n      this._queuedTransition = { nextProps, nextScenes, indexHasChanged };\n      return;\n    }\n\n    this._startTransition(nextProps, nextScenes, indexHasChanged);\n  }\n\n  _startTransition(nextProps, nextScenes, indexHasChanged) {\n    const nextState = {\n      ...this.state,\n      scenes: nextScenes,\n    };\n\n    const { position, progress } = nextState;\n\n    progress.setValue(0);\n\n    this._prevTransitionProps = this._transitionProps;\n    this._transitionProps = buildTransitionProps(nextProps, nextState);\n\n    // get the transition spec.\n    const transitionUserSpec = nextProps.configureTransition\n      ? nextProps.configureTransition(\n          this._transitionProps,\n          this._prevTransitionProps\n        )\n      : null;\n\n    const transitionSpec = {\n      ...DefaultTransitionSpec,\n      ...transitionUserSpec,\n    };\n\n    const { timing } = transitionSpec;\n    delete transitionSpec.timing;\n\n    const toValue = nextProps.navigation.state.index;\n    const positionHasChanged = position.__getValue() !== toValue;\n\n    // if swiped back, indexHasChanged == true && positionHasChanged == false\n    const animations =\n      indexHasChanged && positionHasChanged\n        ? [\n            timing(progress, {\n              ...transitionSpec,\n              toValue: 1,\n            }),\n            timing(position, {\n              ...transitionSpec,\n              toValue: nextProps.navigation.state.index,\n            }),\n          ]\n        : [];\n\n    // update scenes and play the transition\n    this._isTransitionRunning = true;\n    this.setState(nextState, async () => {\n      if (nextProps.onTransitionStart) {\n        const result = nextProps.onTransitionStart(\n          this._transitionProps,\n          this._prevTransitionProps\n        );\n\n        if (result instanceof Promise) {\n          await result;\n        }\n      }\n      Animated.parallel(animations).start(this._onTransitionEnd);\n    });\n  }\n\n  render() {\n    return (\n      <View onLayout={this._onLayout} style={[styles.main]}>\n        {this.props.render(this._transitionProps, this._prevTransitionProps)}\n      </View>\n    );\n  }\n\n  _onLayout(event) {\n    const { height, width } = event.nativeEvent.layout;\n    if (\n      this.state.layout.initWidth === width &&\n      this.state.layout.initHeight === height\n    ) {\n      return;\n    }\n    const layout = {\n      ...this.state.layout,\n      initHeight: height,\n      initWidth: width,\n      isMeasured: true,\n    };\n\n    layout.height.setValue(height);\n    layout.width.setValue(width);\n\n    const nextState = {\n      ...this.state,\n      layout,\n    };\n\n    this._transitionProps = buildTransitionProps(this.props, nextState);\n    this.setState(nextState);\n  }\n\n  _onTransitionEnd() {\n    if (!this._isMounted) {\n      return;\n    }\n    const prevTransitionProps = this._prevTransitionProps;\n    this._prevTransitionProps = null;\n\n    const scenes = this.state.scenes.filter(isSceneNotStale);\n\n    const nextState = {\n      ...this.state,\n      /**\n       * Array.prototype.filter creates a new instance of an array\n       * even if there were no elements removed. There are cases when\n       * `this.state.scenes` will have no stale scenes (typically when\n       * pushing a new route). As a result, components that rely on this prop\n       * might enter an unnecessary render cycle.\n       */\n      scenes:\n        this.state.scenes.length === scenes.length ? this.state.scenes : scenes,\n    };\n\n    this._transitionProps = buildTransitionProps(this.props, nextState);\n\n    this.setState(nextState, async () => {\n      if (this.props.onTransitionEnd) {\n        const result = this.props.onTransitionEnd(\n          this._transitionProps,\n          prevTransitionProps\n        );\n\n        if (result instanceof Promise) {\n          await result;\n        }\n      }\n\n      if (this._queuedTransition) {\n        this._startTransition(\n          this._queuedTransition.nextProps,\n          this._queuedTransition.nextScenes,\n          this._queuedTransition.indexHasChanged\n        );\n        this._queuedTransition = null;\n      } else {\n        this._isTransitionRunning = false;\n      }\n    });\n  }\n}\n\nfunction buildTransitionProps(props, state) {\n  const { navigation } = props;\n\n  const { layout, position, progress, scenes } = state;\n\n  const scene = scenes.find(isSceneActive);\n\n  invariant(scene, 'Could not find active scene');\n\n  return {\n    layout,\n    navigation,\n    position,\n    progress,\n    scenes,\n    scene,\n    index: scene.index,\n  };\n}\n\nfunction isSceneNotStale(scene) {\n  return !scene.isStale;\n}\n\nfunction isSceneActive(scene) {\n  return scene.isActive;\n}\n\nconst styles = StyleSheet.create({\n  main: {\n    flex: 1,\n  },\n});\n\nexport default Transitioner;\n"]},"metadata":{},"sourceType":"module"}