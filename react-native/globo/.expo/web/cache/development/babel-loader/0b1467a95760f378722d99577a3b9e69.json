{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"/Users/felipe/projects/test-react/node_modules/react-navigation/src/views/TabView/TabView.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport { TabViewAnimated, TabViewPagerPan } from 'react-native-tab-view';\nimport SafeAreaView from 'react-native-safe-area-view';\nimport ResourceSavingSceneView from \"../ResourceSavingSceneView\";\nimport withCachedChildNavigation from \"../../withCachedChildNavigation\";\n\nvar TabView = function (_React$PureComponent) {\n  _inherits(TabView, _React$PureComponent);\n\n  var _super = _createSuper(TabView);\n\n  function TabView() {\n    var _this;\n\n    _classCallCheck(this, TabView);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _this._handlePageChanged = function (index) {\n      var navigation = _this.props.navigation;\n      navigation.navigate(navigation.state.routes[index].routeName);\n    };\n\n    _this._renderScene = function (_ref) {\n      var route = _ref.route;\n      var _this$props = _this.props,\n          screenProps = _this$props.screenProps,\n          navigation = _this$props.navigation;\n      var focusedIndex = navigation.state.index;\n      var focusedKey = navigation.state.routes[focusedIndex].key;\n      var key = route.key;\n      var childNavigation = _this.props.childNavigationProps[route.key];\n\n      var TabComponent = _this.props.router.getComponentForRouteName(route.routeName);\n\n      return React.createElement(ResourceSavingSceneView, {\n        lazy: _this.props.lazy,\n        isFocused: focusedKey === key,\n        removeClippedSubViews: _this.props.removeClippedSubviews,\n        animationEnabled: _this.props.animationEnabled,\n        swipeEnabled: _this.props.swipeEnabled,\n        screenProps: screenProps,\n        component: TabComponent,\n        navigation: _this.props.navigation,\n        childNavigation: childNavigation,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 7\n        }\n      });\n    };\n\n    _this._getLabel = function (_ref2) {\n      var route = _ref2.route,\n          tintColor = _ref2.tintColor,\n          focused = _ref2.focused;\n\n      var options = _this.props.router.getScreenOptions(_this.props.childNavigationProps[route.key], _this.props.screenProps || {});\n\n      if (options.tabBarLabel) {\n        return typeof options.tabBarLabel === 'function' ? options.tabBarLabel({\n          tintColor: tintColor,\n          focused: focused\n        }) : options.tabBarLabel;\n      }\n\n      if (typeof options.title === 'string') {\n        return options.title;\n      }\n\n      return route.routeName;\n    };\n\n    _this._getOnPress = function (previousScene, _ref3) {\n      var route = _ref3.route;\n\n      var options = _this.props.router.getScreenOptions(_this.props.childNavigationProps[route.key], _this.props.screenProps || {});\n\n      return options.tabBarOnPress;\n    };\n\n    _this._getTestIDProps = function (_ref4) {\n      var route = _ref4.route,\n          focused = _ref4.focused;\n\n      var options = _this.props.router.getScreenOptions(_this.props.childNavigationProps[route.key], _this.props.screenProps || {});\n\n      return typeof options.tabBarTestIDProps === 'function' ? options.tabBarTestIDProps({\n        focused: focused\n      }) : options.tabBarTestIDProps;\n    };\n\n    _this._renderIcon = function (_ref5) {\n      var focused = _ref5.focused,\n          route = _ref5.route,\n          tintColor = _ref5.tintColor;\n\n      var options = _this.props.router.getScreenOptions(_this.props.childNavigationProps[route.key], _this.props.screenProps || {});\n\n      if (options.tabBarIcon) {\n        return typeof options.tabBarIcon === 'function' ? options.tabBarIcon({\n          tintColor: tintColor,\n          focused: focused\n        }) : options.tabBarIcon;\n      }\n\n      return null;\n    };\n\n    _this._renderTabBar = function (props) {\n      var _this$props2 = _this.props,\n          tabBarOptions = _this$props2.tabBarOptions,\n          TabBarComponent = _this$props2.tabBarComponent,\n          animationEnabled = _this$props2.animationEnabled;\n\n      if (typeof TabBarComponent === 'undefined') {\n        return null;\n      }\n\n      return React.createElement(TabBarComponent, _extends({}, props, tabBarOptions, {\n        tabBarPosition: _this.props.tabBarPosition,\n        screenProps: _this.props.screenProps,\n        navigation: _this.props.navigation,\n        getLabel: _this._getLabel,\n        getTestIDProps: _this._getTestIDProps,\n        getOnPress: _this._getOnPress,\n        renderIcon: _this._renderIcon,\n        animationEnabled: animationEnabled,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 7\n        }\n      }));\n    };\n\n    _this._renderPager = function (props) {\n      return React.createElement(TabViewPagerPan, _extends({}, props, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 27\n        }\n      }));\n    };\n\n    return _this;\n  }\n\n  _createClass(TabView, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props3 = this.props,\n          router = _this$props3.router,\n          tabBarComponent = _this$props3.tabBarComponent,\n          tabBarPosition = _this$props3.tabBarPosition,\n          animationEnabled = _this$props3.animationEnabled,\n          configureTransition = _this$props3.configureTransition,\n          initialLayout = _this$props3.initialLayout,\n          screenProps = _this$props3.screenProps;\n      var renderHeader;\n      var renderFooter;\n      var renderPager;\n      var state = this.props.navigation.state;\n      var options = router.getScreenOptions(this.props.childNavigationProps[state.routes[state.index].key], screenProps || {});\n      var tabBarVisible = options.tabBarVisible == null ? true : options.tabBarVisible;\n      var swipeEnabled = options.swipeEnabled == null ? this.props.swipeEnabled : options.swipeEnabled;\n\n      if (typeof swipeEnabled === 'function') {\n        swipeEnabled = swipeEnabled(state);\n      }\n\n      if (tabBarComponent !== undefined && tabBarVisible) {\n        if (tabBarPosition === 'bottom') {\n          renderFooter = this._renderTabBar;\n        } else {\n          renderHeader = this._renderTabBar;\n        }\n      }\n\n      if (animationEnabled === false && swipeEnabled === false || typeof configureTransition === 'function') {\n        renderPager = this._renderPager;\n      }\n\n      var props = {\n        initialLayout: initialLayout,\n        animationEnabled: animationEnabled,\n        configureTransition: configureTransition,\n        swipeEnabled: swipeEnabled,\n        renderPager: renderPager,\n        renderHeader: renderHeader,\n        renderFooter: renderFooter,\n        renderScene: this._renderScene,\n        onIndexChange: this._handlePageChanged,\n        navigationState: this.props.navigation.state,\n        screenProps: this.props.screenProps,\n        style: styles.container\n      };\n      return React.createElement(TabViewAnimated, _extends({}, props, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 192,\n          columnNumber: 12\n        }\n      }));\n    }\n  }]);\n\n  return TabView;\n}(React.PureComponent);\n\nTabView.defaultProps = {\n  lazy: true,\n  removedClippedSubviews: true,\n  initialLayout: Platform.select({\n    android: {\n      width: 1,\n      height: 0\n    }\n  })\n};\nexport default withCachedChildNavigation(TabView);\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1\n  }\n});","map":{"version":3,"sources":["/Users/felipe/projects/test-react/node_modules/react-navigation/src/views/TabView/TabView.js"],"names":["React","TabViewAnimated","TabViewPagerPan","SafeAreaView","ResourceSavingSceneView","withCachedChildNavigation","TabView","_handlePageChanged","index","navigation","props","navigate","state","routes","routeName","_renderScene","route","screenProps","focusedIndex","focusedKey","key","childNavigation","childNavigationProps","TabComponent","router","getComponentForRouteName","lazy","removeClippedSubviews","animationEnabled","swipeEnabled","_getLabel","tintColor","focused","options","getScreenOptions","tabBarLabel","title","_getOnPress","previousScene","tabBarOnPress","_getTestIDProps","tabBarTestIDProps","_renderIcon","tabBarIcon","_renderTabBar","tabBarOptions","TabBarComponent","tabBarComponent","tabBarPosition","_renderPager","configureTransition","initialLayout","renderHeader","renderFooter","renderPager","tabBarVisible","undefined","renderScene","onIndexChange","navigationState","style","styles","container","PureComponent","defaultProps","removedClippedSubviews","Platform","select","android","width","height","StyleSheet","create","flex"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { View, StyleSheet, Platform } from 'react-native';\nimport { TabViewAnimated, TabViewPagerPan } from 'react-native-tab-view';\nimport SafeAreaView from 'react-native-safe-area-view';\n\nimport ResourceSavingSceneView from '../ResourceSavingSceneView';\nimport withCachedChildNavigation from '../../withCachedChildNavigation';\n\nclass TabView extends React.PureComponent {\n  static defaultProps = {\n    lazy: true,\n    removedClippedSubviews: true,\n    // fix for https://github.com/react-native-community/react-native-tab-view/issues/312\n    initialLayout: Platform.select({\n      android: { width: 1, height: 0 },\n    }),\n  };\n\n  _handlePageChanged = index => {\n    const { navigation } = this.props;\n    navigation.navigate(navigation.state.routes[index].routeName);\n  };\n\n  _renderScene = ({ route }) => {\n    const { screenProps, navigation } = this.props;\n    const focusedIndex = navigation.state.index;\n    const focusedKey = navigation.state.routes[focusedIndex].key;\n    const key = route.key;\n    const childNavigation = this.props.childNavigationProps[route.key];\n    const TabComponent = this.props.router.getComponentForRouteName(\n      route.routeName\n    );\n\n    return (\n      <ResourceSavingSceneView\n        lazy={this.props.lazy}\n        isFocused={focusedKey === key}\n        removeClippedSubViews={this.props.removeClippedSubviews}\n        animationEnabled={this.props.animationEnabled}\n        swipeEnabled={this.props.swipeEnabled}\n        screenProps={screenProps}\n        component={TabComponent}\n        navigation={this.props.navigation}\n        childNavigation={childNavigation}\n      />\n    );\n  };\n\n  _getLabel = ({ route, tintColor, focused }) => {\n    const options = this.props.router.getScreenOptions(\n      this.props.childNavigationProps[route.key],\n      this.props.screenProps || {}\n    );\n\n    if (options.tabBarLabel) {\n      return typeof options.tabBarLabel === 'function'\n        ? options.tabBarLabel({ tintColor, focused })\n        : options.tabBarLabel;\n    }\n\n    if (typeof options.title === 'string') {\n      return options.title;\n    }\n\n    return route.routeName;\n  };\n\n  _getOnPress = (previousScene, { route }) => {\n    const options = this.props.router.getScreenOptions(\n      this.props.childNavigationProps[route.key],\n      this.props.screenProps || {}\n    );\n\n    return options.tabBarOnPress;\n  };\n\n  _getTestIDProps = ({ route, focused }) => {\n    const options = this.props.router.getScreenOptions(\n      this.props.childNavigationProps[route.key],\n      this.props.screenProps || {}\n    );\n\n    return typeof options.tabBarTestIDProps === 'function'\n      ? options.tabBarTestIDProps({ focused })\n      : options.tabBarTestIDProps;\n  };\n\n  _renderIcon = ({ focused, route, tintColor }) => {\n    const options = this.props.router.getScreenOptions(\n      this.props.childNavigationProps[route.key],\n      this.props.screenProps || {}\n    );\n    if (options.tabBarIcon) {\n      return typeof options.tabBarIcon === 'function'\n        ? options.tabBarIcon({ tintColor, focused })\n        : options.tabBarIcon;\n    }\n    return null;\n  };\n\n  _renderTabBar = props => {\n    const {\n      tabBarOptions,\n      tabBarComponent: TabBarComponent,\n      animationEnabled,\n    } = this.props;\n    if (typeof TabBarComponent === 'undefined') {\n      return null;\n    }\n\n    return (\n      <TabBarComponent\n        {...props}\n        {...tabBarOptions}\n        tabBarPosition={this.props.tabBarPosition}\n        screenProps={this.props.screenProps}\n        navigation={this.props.navigation}\n        getLabel={this._getLabel}\n        getTestIDProps={this._getTestIDProps}\n        getOnPress={this._getOnPress}\n        renderIcon={this._renderIcon}\n        animationEnabled={animationEnabled}\n      />\n    );\n  };\n\n  _renderPager = props => <TabViewPagerPan {...props} />;\n\n  render() {\n    const {\n      router,\n      tabBarComponent,\n      tabBarPosition,\n      animationEnabled,\n      configureTransition,\n      initialLayout,\n      screenProps,\n    } = this.props;\n\n    let renderHeader;\n    let renderFooter;\n    let renderPager;\n\n    const { state } = this.props.navigation;\n    const options = router.getScreenOptions(\n      this.props.childNavigationProps[state.routes[state.index].key],\n      screenProps || {}\n    );\n\n    const tabBarVisible =\n      options.tabBarVisible == null ? true : options.tabBarVisible;\n\n    let swipeEnabled =\n      options.swipeEnabled == null\n        ? this.props.swipeEnabled\n        : options.swipeEnabled;\n\n    if (typeof swipeEnabled === 'function') {\n      swipeEnabled = swipeEnabled(state);\n    }\n\n    if (tabBarComponent !== undefined && tabBarVisible) {\n      if (tabBarPosition === 'bottom') {\n        renderFooter = this._renderTabBar;\n      } else {\n        renderHeader = this._renderTabBar;\n      }\n    }\n\n    if (\n      (animationEnabled === false && swipeEnabled === false) ||\n      typeof configureTransition === 'function'\n    ) {\n      renderPager = this._renderPager;\n    }\n\n    const props = {\n      initialLayout,\n      animationEnabled,\n      configureTransition,\n      swipeEnabled,\n      renderPager,\n      renderHeader,\n      renderFooter,\n      renderScene: this._renderScene,\n      onIndexChange: this._handlePageChanged,\n      navigationState: this.props.navigation.state,\n      screenProps: this.props.screenProps,\n      style: styles.container,\n    };\n\n    return <TabViewAnimated {...props} />;\n  }\n}\n\nexport default withCachedChildNavigation(TabView);\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}