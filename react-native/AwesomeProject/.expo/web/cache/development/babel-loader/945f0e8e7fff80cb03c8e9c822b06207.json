{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport invariant from \"../utils/invariant\";\nimport getScreenForRouteName from \"./getScreenForRouteName\";\nimport createConfigGetter from \"./createConfigGetter\";\nimport NavigationActions from \"../NavigationActions\";\nimport validateRouteConfigMap from \"./validateRouteConfigMap\";\nimport getScreenConfigDeprecated from \"./getScreenConfigDeprecated\";\n\nfunction childrenUpdateWithoutSwitchingIndex(actionType) {\n  return [NavigationActions.SET_PARAMS, NavigationActions.COMPLETE_TRANSITION].includes(actionType);\n}\n\nexport default (function (routeConfigs) {\n  var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  validateRouteConfigMap(routeConfigs);\n  var order = config.order || Object.keys(routeConfigs);\n  var paths = config.paths || {};\n  var initialRouteParams = config.initialRouteParams;\n  var initialRouteName = config.initialRouteName || order[0];\n  var backBehavior = config.backBehavior || 'none';\n  var shouldBackNavigateToInitialRoute = backBehavior === 'initialRoute';\n  var resetOnBlur = config.hasOwnProperty('resetOnBlur') ? config.resetOnBlur : true;\n  var initialRouteIndex = order.indexOf(initialRouteName);\n  var childRouters = {};\n  order.forEach(function (routeName) {\n    var routeConfig = routeConfigs[routeName];\n    paths[routeName] = typeof routeConfig.path === 'string' ? routeConfig.path : routeName;\n    childRouters[routeName] = null;\n    var screen = getScreenForRouteName(routeConfigs, routeName);\n\n    if (screen.router) {\n      childRouters[routeName] = screen.router;\n    }\n  });\n\n  if (initialRouteIndex === -1) {\n    throw new Error(\"Invalid initialRouteName '\" + initialRouteName + \"'.\" + (\"Should be one of \" + order.map(function (n) {\n      return \"\\\"\" + n + \"\\\"\";\n    }).join(', ')));\n  }\n\n  function resetChildRoute(routeName) {\n    var params = routeName === initialRouteName ? initialRouteParams : undefined;\n    var childRouter = childRouters[routeName];\n\n    if (childRouter) {\n      var childAction = NavigationActions.init();\n      return _objectSpread(_objectSpread({}, childRouter.getStateForAction(childAction)), {}, {\n        key: routeName,\n        routeName: routeName,\n        params: params\n      });\n    }\n\n    return {\n      key: routeName,\n      routeName: routeName,\n      params: params\n    };\n  }\n\n  return {\n    getInitialState: function getInitialState() {\n      var routes = order.map(resetChildRoute);\n      return {\n        routes: routes,\n        index: initialRouteIndex,\n        isTransitioning: false\n      };\n    },\n    getNextState: function getNextState(prevState, possibleNextState) {\n      var nextState;\n\n      if (prevState.index !== possibleNextState.index && resetOnBlur) {\n        var prevRouteName = prevState.routes[prevState.index].routeName;\n\n        var nextRoutes = _toConsumableArray(possibleNextState.routes);\n\n        nextRoutes[prevState.index] = resetChildRoute(prevRouteName);\n        return _objectSpread(_objectSpread({}, possibleNextState), {}, {\n          routes: nextRoutes\n        });\n      } else {\n        nextState = possibleNextState;\n      }\n\n      return nextState;\n    },\n    getStateForAction: function getStateForAction(action, inputState) {\n      var prevState = inputState ? _objectSpread({}, inputState) : inputState;\n      var state = inputState || this.getInitialState();\n      var activeChildIndex = state.index;\n\n      if (action.type === NavigationActions.INIT) {\n        var params = action.params;\n\n        if (params) {\n          state.routes = state.routes.map(function (route) {\n            return _objectSpread(_objectSpread({}, route), {}, {\n              params: _objectSpread(_objectSpread(_objectSpread({}, route.params), params), route.routeName === initialRouteName ? initialRouteParams : null)\n            });\n          });\n        }\n      }\n\n      var activeChildLastState = state.routes[state.index];\n      var activeChildRouter = childRouters[order[state.index]];\n\n      if (activeChildRouter) {\n        var activeChildState = activeChildRouter.getStateForAction(action, activeChildLastState);\n\n        if (!activeChildState && inputState) {\n          return null;\n        }\n\n        if (activeChildState && activeChildState !== activeChildLastState) {\n          var _routes = _toConsumableArray(state.routes);\n\n          _routes[state.index] = activeChildState;\n          return this.getNextState(prevState, _objectSpread(_objectSpread({}, state), {}, {\n            routes: _routes\n          }));\n        }\n      }\n\n      if (backBehavior !== 'none') {\n        var isBackEligible = action.key == null || action.key === activeChildLastState.key;\n\n        if (action.type === NavigationActions.BACK) {\n          if (isBackEligible && shouldBackNavigateToInitialRoute) {\n            activeChildIndex = initialRouteIndex;\n          } else {\n            return state;\n          }\n        }\n      }\n\n      var didNavigate = false;\n\n      if (action.type === NavigationActions.NAVIGATE) {\n        var navigateAction = action;\n        didNavigate = !!order.find(function (childId, i) {\n          if (childId === navigateAction.routeName) {\n            activeChildIndex = i;\n            return true;\n          }\n\n          return false;\n        });\n\n        if (didNavigate) {\n          var childState = state.routes[activeChildIndex];\n          var newChildState;\n          var childRouter = childRouters[action.routeName];\n\n          if (action.action) {\n            newChildState = childRouter ? childRouter.getStateForAction(action.action, childState) : null;\n          } else if (!childRouter && action.params) {\n            newChildState = _objectSpread(_objectSpread({}, childState), {}, {\n              params: _objectSpread(_objectSpread({}, childState.params || {}), action.params)\n            });\n          }\n\n          if (newChildState && newChildState !== childState) {\n            var _routes2 = _toConsumableArray(state.routes);\n\n            _routes2[activeChildIndex] = newChildState;\n            return this.getNextState(prevState, _objectSpread(_objectSpread({}, state), {}, {\n              routes: _routes2,\n              index: activeChildIndex\n            }));\n          }\n        }\n      }\n\n      if (action.type === NavigationActions.SET_PARAMS) {\n        var key = action.key;\n        var lastRoute = state.routes.find(function (route) {\n          return route.key === key;\n        });\n\n        if (lastRoute) {\n          var _params = _objectSpread(_objectSpread({}, lastRoute.params), action.params);\n\n          var _routes3 = _toConsumableArray(state.routes);\n\n          _routes3[state.routes.indexOf(lastRoute)] = _objectSpread(_objectSpread({}, lastRoute), {}, {\n            params: _params\n          });\n          return this.getNextState(prevState, _objectSpread(_objectSpread({}, state), {}, {\n            routes: _routes3\n          }));\n        }\n      }\n\n      if (activeChildIndex !== state.index) {\n        return this.getNextState(prevState, _objectSpread(_objectSpread({}, state), {}, {\n          index: activeChildIndex\n        }));\n      } else if (didNavigate && !inputState) {\n        return state;\n      } else if (didNavigate) {\n        return null;\n      }\n\n      var index = state.index;\n      var routes = state.routes;\n      order.find(function (childId, i) {\n        var childRouter = childRouters[childId];\n\n        if (i === index) {\n          return false;\n        }\n\n        var childState = routes[i];\n\n        if (childRouter) {\n          childState = childRouter.getStateForAction(action, childState);\n        }\n\n        if (!childState) {\n          index = i;\n          return true;\n        }\n\n        if (childState !== routes[i]) {\n          routes = _toConsumableArray(routes);\n          routes[i] = childState;\n          index = i;\n          return true;\n        }\n\n        return false;\n      });\n\n      if (childrenUpdateWithoutSwitchingIndex(action.type)) {\n        index = state.index;\n      }\n\n      if (index !== state.index || routes !== state.routes) {\n        return this.getNextState(prevState, _objectSpread(_objectSpread({}, state), {}, {\n          index: index,\n          routes: routes\n        }));\n      }\n\n      return state;\n    },\n    getComponentForState: function getComponentForState(state) {\n      var routeName = state.routes[state.index].routeName;\n      invariant(routeName, \"There is no route defined for index \" + state.index + \". Check that\\n        that you passed in a navigation state with a valid tab/screen index.\");\n      var childRouter = childRouters[routeName];\n\n      if (childRouter) {\n        return childRouter.getComponentForState(state.routes[state.index]);\n      }\n\n      return getScreenForRouteName(routeConfigs, routeName);\n    },\n    getComponentForRouteName: function getComponentForRouteName(routeName) {\n      return getScreenForRouteName(routeConfigs, routeName);\n    },\n    getPathAndParamsForState: function getPathAndParamsForState(state) {\n      var route = state.routes[state.index];\n      var routeName = order[state.index];\n      var subPath = paths[routeName];\n      var screen = getScreenForRouteName(routeConfigs, routeName);\n      var path = subPath;\n      var params = route.params;\n\n      if (screen && screen.router) {\n        var stateRoute = route;\n        var child = screen.router.getPathAndParamsForState(stateRoute);\n        path = subPath ? subPath + \"/\" + child.path : child.path;\n        params = child.params ? _objectSpread(_objectSpread({}, params), child.params) : params;\n      }\n\n      return {\n        path: path,\n        params: params\n      };\n    },\n    getActionForPathAndParams: function getActionForPathAndParams(path, params) {\n      return order.map(function (childId) {\n        var parts = path.split('/');\n        var pathToTest = paths[childId];\n\n        if (parts[0] === pathToTest) {\n          var childRouter = childRouters[childId];\n          var action = NavigationActions.navigate({\n            routeName: childId\n          });\n\n          if (childRouter && childRouter.getActionForPathAndParams) {\n            action.action = childRouter.getActionForPathAndParams(parts.slice(1).join('/'), params);\n          } else if (params) {\n            action.params = params;\n          }\n\n          return action;\n        }\n\n        return null;\n      }).find(function (action) {\n        return !!action;\n      }) || order.map(function (childId) {\n        var childRouter = childRouters[childId];\n        return childRouter && childRouter.getActionForPathAndParams(path, params);\n      }).find(function (action) {\n        return !!action;\n      }) || null;\n    },\n    getScreenOptions: createConfigGetter(routeConfigs, config.navigationOptions),\n    getScreenConfig: getScreenConfigDeprecated\n  };\n});","map":{"version":3,"sources":["/Users/felipe/projects/lucy-farm/AwesomeProject/node_modules/react-navigation/src/routers/SwitchRouter.js"],"names":["invariant","getScreenForRouteName","createConfigGetter","NavigationActions","validateRouteConfigMap","getScreenConfigDeprecated","childrenUpdateWithoutSwitchingIndex","actionType","SET_PARAMS","COMPLETE_TRANSITION","includes","routeConfigs","config","order","Object","keys","paths","initialRouteParams","initialRouteName","backBehavior","shouldBackNavigateToInitialRoute","resetOnBlur","hasOwnProperty","initialRouteIndex","indexOf","childRouters","forEach","routeName","routeConfig","path","screen","router","Error","map","n","join","resetChildRoute","params","undefined","childRouter","childAction","init","getStateForAction","key","getInitialState","routes","index","isTransitioning","getNextState","prevState","possibleNextState","nextState","prevRouteName","nextRoutes","action","inputState","state","activeChildIndex","type","INIT","route","activeChildLastState","activeChildRouter","activeChildState","isBackEligible","BACK","didNavigate","NAVIGATE","navigateAction","find","childId","i","childState","newChildState","lastRoute","getComponentForState","getComponentForRouteName","getPathAndParamsForState","subPath","stateRoute","child","getActionForPathAndParams","parts","split","pathToTest","navigate","slice","getScreenOptions","navigationOptions","getScreenConfig"],"mappings":"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","sourcesContent":["import invariant from '../utils/invariant';\nimport getScreenForRouteName from './getScreenForRouteName';\nimport createConfigGetter from './createConfigGetter';\n\nimport NavigationActions from '../NavigationActions';\nimport validateRouteConfigMap from './validateRouteConfigMap';\nimport getScreenConfigDeprecated from './getScreenConfigDeprecated';\n\nfunction childrenUpdateWithoutSwitchingIndex(actionType) {\n  return [\n    NavigationActions.SET_PARAMS,\n    NavigationActions.COMPLETE_TRANSITION,\n  ].includes(actionType);\n}\n\nexport default (routeConfigs, config = {}) => {\n  // Fail fast on invalid route definitions\n  validateRouteConfigMap(routeConfigs);\n\n  const order = config.order || Object.keys(routeConfigs);\n  const paths = config.paths || {};\n  const initialRouteParams = config.initialRouteParams;\n  const initialRouteName = config.initialRouteName || order[0];\n  const backBehavior = config.backBehavior || 'none';\n  const shouldBackNavigateToInitialRoute = backBehavior === 'initialRoute';\n  const resetOnBlur = config.hasOwnProperty('resetOnBlur')\n    ? config.resetOnBlur\n    : true;\n  const initialRouteIndex = order.indexOf(initialRouteName);\n  const childRouters = {};\n\n  order.forEach(routeName => {\n    const routeConfig = routeConfigs[routeName];\n    paths[routeName] =\n      typeof routeConfig.path === 'string' ? routeConfig.path : routeName;\n    childRouters[routeName] = null;\n    const screen = getScreenForRouteName(routeConfigs, routeName);\n    if (screen.router) {\n      childRouters[routeName] = screen.router;\n    }\n  });\n  if (initialRouteIndex === -1) {\n    throw new Error(\n      `Invalid initialRouteName '${initialRouteName}'.` +\n        `Should be one of ${order.map(n => `\"${n}\"`).join(', ')}`\n    );\n  }\n\n  function resetChildRoute(routeName) {\n    const params =\n      routeName === initialRouteName ? initialRouteParams : undefined;\n    const childRouter = childRouters[routeName];\n    if (childRouter) {\n      const childAction = NavigationActions.init();\n      return {\n        ...childRouter.getStateForAction(childAction),\n        key: routeName,\n        routeName,\n        params,\n      };\n    }\n    return {\n      key: routeName,\n      routeName,\n      params,\n    };\n  }\n\n  return {\n    getInitialState() {\n      const routes = order.map(resetChildRoute);\n      return {\n        routes,\n        index: initialRouteIndex,\n        isTransitioning: false,\n      };\n    },\n\n    getNextState(prevState, possibleNextState) {\n      let nextState;\n      if (prevState.index !== possibleNextState.index && resetOnBlur) {\n        const prevRouteName = prevState.routes[prevState.index].routeName;\n        const nextRoutes = [...possibleNextState.routes];\n        nextRoutes[prevState.index] = resetChildRoute(prevRouteName);\n\n        return {\n          ...possibleNextState,\n          routes: nextRoutes,\n        };\n      } else {\n        nextState = possibleNextState;\n      }\n\n      return nextState;\n    },\n\n    getStateForAction(action, inputState) {\n      let prevState = inputState ? { ...inputState } : inputState;\n      let state = inputState || this.getInitialState();\n      let activeChildIndex = state.index;\n\n      if (action.type === NavigationActions.INIT) {\n        // NOTE(brentvatne): this seems weird... why are we merging these\n        // params into child routes?\n        // ---------------------------------------------------------------\n        // Merge any params from the action into all the child routes\n        const { params } = action;\n        if (params) {\n          state.routes = state.routes.map(route => ({\n            ...route,\n            params: {\n              ...route.params,\n              ...params,\n              ...(route.routeName === initialRouteName\n                ? initialRouteParams\n                : null),\n            },\n          }));\n        }\n      }\n\n      // Let the current child handle it\n      const activeChildLastState = state.routes[state.index];\n      const activeChildRouter = childRouters[order[state.index]];\n      if (activeChildRouter) {\n        const activeChildState = activeChildRouter.getStateForAction(\n          action,\n          activeChildLastState\n        );\n        if (!activeChildState && inputState) {\n          return null;\n        }\n        if (activeChildState && activeChildState !== activeChildLastState) {\n          const routes = [...state.routes];\n          routes[state.index] = activeChildState;\n          return this.getNextState(prevState, {\n            ...state,\n            routes,\n          });\n        }\n      }\n\n      // Handle tab changing. Do this after letting the current tab try to\n      // handle the action, to allow inner children to change first\n      if (backBehavior !== 'none') {\n        const isBackEligible =\n          action.key == null || action.key === activeChildLastState.key;\n        if (action.type === NavigationActions.BACK) {\n          if (isBackEligible && shouldBackNavigateToInitialRoute) {\n            activeChildIndex = initialRouteIndex;\n          } else {\n            return state;\n          }\n        }\n      }\n\n      let didNavigate = false;\n      if (action.type === NavigationActions.NAVIGATE) {\n        const navigateAction = action;\n        didNavigate = !!order.find((childId, i) => {\n          if (childId === navigateAction.routeName) {\n            activeChildIndex = i;\n            return true;\n          }\n          return false;\n        });\n        if (didNavigate) {\n          const childState = state.routes[activeChildIndex];\n          let newChildState;\n\n          const childRouter = childRouters[action.routeName];\n\n          if (action.action) {\n            newChildState = childRouter\n              ? childRouter.getStateForAction(action.action, childState)\n              : null;\n          } else if (!childRouter && action.params) {\n            newChildState = {\n              ...childState,\n              params: {\n                ...(childState.params || {}),\n                ...action.params,\n              },\n            };\n          }\n\n          if (newChildState && newChildState !== childState) {\n            const routes = [...state.routes];\n            routes[activeChildIndex] = newChildState;\n            return this.getNextState(prevState, {\n              ...state,\n              routes,\n              index: activeChildIndex,\n            });\n          }\n        }\n      }\n\n      if (action.type === NavigationActions.SET_PARAMS) {\n        const key = action.key;\n        const lastRoute = state.routes.find(route => route.key === key);\n        if (lastRoute) {\n          const params = {\n            ...lastRoute.params,\n            ...action.params,\n          };\n          const routes = [...state.routes];\n          routes[state.routes.indexOf(lastRoute)] = {\n            ...lastRoute,\n            params,\n          };\n          return this.getNextState(prevState, {\n            ...state,\n            routes,\n          });\n        }\n      }\n\n      if (activeChildIndex !== state.index) {\n        return this.getNextState(prevState, {\n          ...state,\n          index: activeChildIndex,\n        });\n      } else if (didNavigate && !inputState) {\n        return state;\n      } else if (didNavigate) {\n        return null;\n      }\n\n      // Let other children handle it and switch to the first child that returns a new state\n      let index = state.index;\n      let routes = state.routes;\n      order.find((childId, i) => {\n        const childRouter = childRouters[childId];\n        if (i === index) {\n          return false;\n        }\n        let childState = routes[i];\n        if (childRouter) {\n          childState = childRouter.getStateForAction(action, childState);\n        }\n        if (!childState) {\n          index = i;\n          return true;\n        }\n        if (childState !== routes[i]) {\n          routes = [...routes];\n          routes[i] = childState;\n          index = i;\n          return true;\n        }\n        return false;\n      });\n\n      // Nested routers can be updated after switching children with actions such as SET_PARAMS\n      // and COMPLETE_TRANSITION.\n      // NOTE: This may be problematic with custom routers because we whitelist the actions\n      // that can be handled by child routers without automatically changing index.\n      if (childrenUpdateWithoutSwitchingIndex(action.type)) {\n        index = state.index;\n      }\n\n      if (index !== state.index || routes !== state.routes) {\n        return this.getNextState(prevState, {\n          ...state,\n          index,\n          routes,\n        });\n      }\n      return state;\n    },\n\n    getComponentForState(state) {\n      const routeName = state.routes[state.index].routeName;\n      invariant(\n        routeName,\n        `There is no route defined for index ${state.index}. Check that\n        that you passed in a navigation state with a valid tab/screen index.`\n      );\n      const childRouter = childRouters[routeName];\n      if (childRouter) {\n        return childRouter.getComponentForState(state.routes[state.index]);\n      }\n      return getScreenForRouteName(routeConfigs, routeName);\n    },\n\n    getComponentForRouteName(routeName) {\n      return getScreenForRouteName(routeConfigs, routeName);\n    },\n\n    getPathAndParamsForState(state) {\n      const route = state.routes[state.index];\n      const routeName = order[state.index];\n      const subPath = paths[routeName];\n      const screen = getScreenForRouteName(routeConfigs, routeName);\n      let path = subPath;\n      let params = route.params;\n      if (screen && screen.router) {\n        const stateRoute = route;\n        // If it has a router it's a navigator.\n        // If it doesn't have router it's an ordinary React component.\n        const child = screen.router.getPathAndParamsForState(stateRoute);\n        path = subPath ? `${subPath}/${child.path}` : child.path;\n        params = child.params ? { ...params, ...child.params } : params;\n      }\n      return {\n        path,\n        params,\n      };\n    },\n\n    /**\n     * Gets an optional action, based on a relative path and query params.\n     *\n     * This will return null if there is no action matched\n     */\n    getActionForPathAndParams(path, params) {\n      return (\n        order\n          .map(childId => {\n            const parts = path.split('/');\n            const pathToTest = paths[childId];\n            if (parts[0] === pathToTest) {\n              const childRouter = childRouters[childId];\n              const action = NavigationActions.navigate({\n                routeName: childId,\n              });\n              if (childRouter && childRouter.getActionForPathAndParams) {\n                action.action = childRouter.getActionForPathAndParams(\n                  parts.slice(1).join('/'),\n                  params\n                );\n              } else if (params) {\n                action.params = params;\n              }\n              return action;\n            }\n            return null;\n          })\n          .find(action => !!action) ||\n        order\n          .map(childId => {\n            const childRouter = childRouters[childId];\n            return (\n              childRouter && childRouter.getActionForPathAndParams(path, params)\n            );\n          })\n          .find(action => !!action) ||\n        null\n      );\n    },\n\n    getScreenOptions: createConfigGetter(\n      routeConfigs,\n      config.navigationOptions\n    ),\n\n    getScreenConfig: getScreenConfigDeprecated,\n  };\n};\n"]},"metadata":{},"sourceType":"module"}