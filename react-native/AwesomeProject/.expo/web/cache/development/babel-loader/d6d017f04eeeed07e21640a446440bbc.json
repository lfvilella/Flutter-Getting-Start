{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"/Users/felipe/projects/lucy-farm/AwesomeProject/node_modules/react-navigation/src/views/TabView/TabBarBottom.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from 'react';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport TouchableWithoutFeedback from \"react-native-web/dist/exports/TouchableWithoutFeedback\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport Keyboard from \"react-native-web/dist/exports/Keyboard\";\nimport SafeAreaView from 'react-native-safe-area-view';\nimport TabBarIcon from \"./TabBarIcon\";\nimport NavigationActions from \"../../NavigationActions\";\nimport withOrientation from \"../withOrientation\";\nvar majorVersion = parseInt(Platform.Version, 10);\nvar isIos = Platform.OS === 'ios';\nvar isIOS11 = majorVersion >= 11 && isIos;\nvar defaultMaxTabBarItemWidth = 125;\n\nvar TabBarBottom = function (_React$PureComponent) {\n  _inherits(TabBarBottom, _React$PureComponent);\n\n  var _super = _createSuper(TabBarBottom);\n\n  function TabBarBottom() {\n    var _this;\n\n    _classCallCheck(this, TabBarBottom);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _this._renderLabel = function (scene) {\n      var _this$props = _this.props,\n          position = _this$props.position,\n          navigation = _this$props.navigation,\n          activeTintColor = _this$props.activeTintColor,\n          inactiveTintColor = _this$props.inactiveTintColor,\n          labelStyle = _this$props.labelStyle,\n          showLabel = _this$props.showLabel,\n          showIcon = _this$props.showIcon,\n          isLandscape = _this$props.isLandscape,\n          allowFontScaling = _this$props.allowFontScaling;\n\n      if (showLabel === false) {\n        return null;\n      }\n\n      var index = scene.index;\n      var routes = navigation.state.routes;\n      var inputRange = [-1].concat(_toConsumableArray(routes.map(function (x, i) {\n        return i;\n      })));\n      var outputRange = inputRange.map(function (inputIndex) {\n        return inputIndex === index ? activeTintColor : inactiveTintColor;\n      });\n      var color = position.interpolate({\n        inputRange: inputRange,\n        outputRange: outputRange\n      });\n      var tintColor = scene.focused ? activeTintColor : inactiveTintColor;\n\n      var label = _this.props.getLabel(_objectSpread(_objectSpread({}, scene), {}, {\n        tintColor: tintColor\n      }));\n\n      if (typeof label === 'string') {\n        return React.createElement(Animated.Text, {\n          numberOfLines: 1,\n          style: [styles.label, {\n            color: color\n          }, showIcon && _this._shouldUseHorizontalTabs() ? styles.labelBeside : styles.labelBeneath, labelStyle],\n          allowFontScaling: allowFontScaling,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 66,\n            columnNumber: 9\n          }\n        }, label);\n      }\n\n      if (typeof label === 'function') {\n        return label(_objectSpread(_objectSpread({}, scene), {}, {\n          tintColor: tintColor\n        }));\n      }\n\n      return label;\n    };\n\n    _this._renderIcon = function (scene) {\n      var _this$props2 = _this.props,\n          position = _this$props2.position,\n          navigation = _this$props2.navigation,\n          activeTintColor = _this$props2.activeTintColor,\n          inactiveTintColor = _this$props2.inactiveTintColor,\n          renderIcon = _this$props2.renderIcon,\n          showIcon = _this$props2.showIcon,\n          showLabel = _this$props2.showLabel;\n\n      if (showIcon === false) {\n        return null;\n      }\n\n      return React.createElement(TabBarIcon, {\n        position: position,\n        navigation: navigation,\n        activeTintColor: activeTintColor,\n        inactiveTintColor: inactiveTintColor,\n        renderIcon: renderIcon,\n        scene: scene,\n        style: showLabel && _this._shouldUseHorizontalTabs() ? {} : styles.icon,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 7\n        }\n      });\n    };\n\n    _this._renderTestIDProps = function (scene) {\n      var testIDProps = _this.props.getTestIDProps && _this.props.getTestIDProps(scene);\n\n      return testIDProps;\n    };\n\n    _this._handleTabPress = function (index) {\n      var _this$props3 = _this.props,\n          jumpToIndex = _this$props3.jumpToIndex,\n          navigation = _this$props3.navigation;\n      var currentIndex = navigation.state.index;\n\n      if (currentIndex === index) {\n        var childRoute = navigation.state.routes[index];\n\n        if (childRoute.hasOwnProperty('index') && childRoute.index > 0) {\n          navigation.dispatch(NavigationActions.popToTop({\n            key: childRoute.key\n          }));\n        } else {}\n      } else {\n        jumpToIndex(index);\n      }\n    };\n\n    return _this;\n  }\n\n  _createClass(TabBarBottom, [{\n    key: \"_tabItemMaxWidth\",\n    value: function _tabItemMaxWidth() {\n      var _this$props4 = this.props,\n          tabStyle = _this$props4.tabStyle,\n          layout = _this$props4.layout;\n      var maxTabBarItemWidth;\n      var flattenedTabStyle = StyleSheet.flatten(tabStyle);\n\n      if (flattenedTabStyle) {\n        if (typeof flattenedTabStyle.width === 'number') {\n          maxTabBarItemWidth = flattenedTabStyle.width;\n        } else if (typeof flattenedTabStyle.width === 'string' && flattenedTabStyle.endsWith('%')) {\n          var width = parseFloat(flattenedTabStyle.width);\n\n          if (Number.isFinite(width)) {\n            maxTabBarItemWidth = layout.width * (width / 100);\n          }\n        } else if (typeof flattenedTabStyle.maxWidth === 'number') {\n          maxTabBarItemWidth = flattenedTabStyle.maxWidth;\n        } else if (typeof flattenedTabStyle.maxWidth === 'string' && flattenedTabStyle.endsWith('%')) {\n          var _width = parseFloat(flattenedTabStyle.maxWidth);\n\n          if (Number.isFinite(_width)) {\n            maxTabBarItemWidth = layout.width * (_width / 100);\n          }\n        }\n      }\n\n      if (!maxTabBarItemWidth) {\n        maxTabBarItemWidth = defaultMaxTabBarItemWidth;\n      }\n\n      return maxTabBarItemWidth;\n    }\n  }, {\n    key: \"_shouldUseHorizontalTabs\",\n    value: function _shouldUseHorizontalTabs() {\n      var routes = this.props.navigation.state.routes;\n      var _this$props5 = this.props,\n          isLandscape = _this$props5.isLandscape,\n          layout = _this$props5.layout,\n          adaptive = _this$props5.adaptive,\n          tabStyle = _this$props5.tabStyle;\n\n      if (!adaptive) {\n        return false;\n      }\n\n      var tabBarWidth = layout.width;\n\n      if (tabBarWidth === 0) {\n        return Platform.isPad;\n      }\n\n      if (!Platform.isPad) {\n        return isLandscape;\n      } else {\n        var maxTabBarItemWidth = this._tabItemMaxWidth();\n\n        return routes.length * maxTabBarItemWidth <= tabBarWidth;\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props6 = this.props,\n          position = _this$props6.position,\n          navigation = _this$props6.navigation,\n          jumpToIndex = _this$props6.jumpToIndex,\n          getOnPress = _this$props6.getOnPress,\n          getTestIDProps = _this$props6.getTestIDProps,\n          activeBackgroundColor = _this$props6.activeBackgroundColor,\n          inactiveBackgroundColor = _this$props6.inactiveBackgroundColor,\n          style = _this$props6.style,\n          animateStyle = _this$props6.animateStyle,\n          tabStyle = _this$props6.tabStyle,\n          isLandscape = _this$props6.isLandscape;\n      var routes = navigation.state.routes;\n      var previousScene = routes[navigation.state.index];\n      var inputRange = [-1].concat(_toConsumableArray(routes.map(function (x, i) {\n        return i;\n      })));\n      var tabBarStyle = [styles.tabBar, this._shouldUseHorizontalTabs() && !Platform.isPad ? styles.tabBarCompact : styles.tabBarRegular, style];\n      return React.createElement(Animated.View, {\n        style: animateStyle,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 226,\n          columnNumber: 7\n        }\n      }, React.createElement(SafeAreaView, {\n        style: tabBarStyle,\n        forceInset: {\n          bottom: 'always',\n          top: 'never'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 227,\n          columnNumber: 9\n        }\n      }, routes.map(function (route, index) {\n        var focused = index === navigation.state.index;\n        var scene = {\n          route: route,\n          index: index,\n          focused: focused\n        };\n\n        var _onPress = getOnPress(previousScene, scene);\n\n        var outputRange = inputRange.map(function (inputIndex) {\n          return inputIndex === index ? activeBackgroundColor : inactiveBackgroundColor;\n        });\n        var backgroundColor = position.interpolate({\n          inputRange: inputRange,\n          outputRange: outputRange\n        });\n        var justifyContent = _this2.props.showIcon ? 'flex-end' : 'center';\n        var extraProps = _this2._renderTestIDProps(scene) || {};\n        var testID = extraProps.testID,\n            accessibilityLabel = extraProps.accessibilityLabel;\n        return React.createElement(TouchableWithoutFeedback, {\n          key: route.key,\n          testID: testID,\n          accessibilityLabel: accessibilityLabel,\n          onPress: function onPress() {\n            return _onPress ? _onPress({\n              previousScene: previousScene,\n              scene: scene,\n              jumpToIndex: jumpToIndex,\n              defaultHandler: _this2._handleTabPress\n            }) : _this2._handleTabPress(index);\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 251,\n            columnNumber: 15\n          }\n        }, React.createElement(Animated.View, {\n          style: [styles.tab, {\n            backgroundColor: backgroundColor\n          }],\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 266,\n            columnNumber: 17\n          }\n        }, React.createElement(View, {\n          style: [styles.tab, _this2._shouldUseHorizontalTabs() ? styles.tabLandscape : styles.tabPortrait, tabStyle],\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 267,\n            columnNumber: 19\n          }\n        }, _this2._renderIcon(scene), _this2._renderLabel(scene))));\n      })));\n    }\n  }]);\n\n  return TabBarBottom;\n}(React.PureComponent);\n\nTabBarBottom.defaultProps = {\n  activeTintColor: '#3478f6',\n  activeBackgroundColor: 'transparent',\n  inactiveTintColor: '#929292',\n  inactiveBackgroundColor: 'transparent',\n  showLabel: true,\n  showIcon: true,\n  allowFontScaling: true,\n  adaptive: isIOS11\n};\nvar styles = StyleSheet.create({\n  tabBar: {\n    backgroundColor: '#F7F7F7',\n    borderTopWidth: StyleSheet.hairlineWidth,\n    borderTopColor: 'rgba(0, 0, 0, .3)',\n    flexDirection: 'row'\n  },\n  tabBarCompact: {\n    height: 29\n  },\n  tabBarRegular: {\n    height: 49\n  },\n  tab: {\n    flex: 1,\n    alignItems: isIos ? 'center' : 'stretch'\n  },\n  tabPortrait: {\n    justifyContent: 'flex-end',\n    flexDirection: 'column'\n  },\n  tabLandscape: {\n    justifyContent: 'center',\n    flexDirection: 'row'\n  },\n  icon: {\n    flexGrow: 1\n  },\n  label: {\n    textAlign: 'center',\n    backgroundColor: 'transparent'\n  },\n  labelBeneath: {\n    fontSize: 10,\n    marginBottom: 1.5\n  },\n  labelBeside: {\n    fontSize: 13,\n    marginLeft: 20\n  }\n});\nexport default withOrientation(TabBarBottom);","map":{"version":3,"sources":["/Users/felipe/projects/lucy-farm/AwesomeProject/node_modules/react-navigation/src/views/TabView/TabBarBottom.js"],"names":["React","SafeAreaView","TabBarIcon","NavigationActions","withOrientation","majorVersion","parseInt","Platform","Version","isIos","OS","isIOS11","defaultMaxTabBarItemWidth","TabBarBottom","_renderLabel","scene","props","position","navigation","activeTintColor","inactiveTintColor","labelStyle","showLabel","showIcon","isLandscape","allowFontScaling","index","routes","state","inputRange","map","x","i","outputRange","inputIndex","color","interpolate","tintColor","focused","label","getLabel","styles","_shouldUseHorizontalTabs","labelBeside","labelBeneath","_renderIcon","renderIcon","icon","_renderTestIDProps","testIDProps","getTestIDProps","_handleTabPress","jumpToIndex","currentIndex","childRoute","hasOwnProperty","dispatch","popToTop","key","tabStyle","layout","maxTabBarItemWidth","flattenedTabStyle","StyleSheet","flatten","width","endsWith","parseFloat","Number","isFinite","maxWidth","adaptive","tabBarWidth","isPad","_tabItemMaxWidth","length","getOnPress","activeBackgroundColor","inactiveBackgroundColor","style","animateStyle","previousScene","tabBarStyle","tabBar","tabBarCompact","tabBarRegular","bottom","top","route","onPress","backgroundColor","justifyContent","extraProps","testID","accessibilityLabel","defaultHandler","tab","tabLandscape","tabPortrait","PureComponent","defaultProps","create","borderTopWidth","hairlineWidth","borderTopColor","flexDirection","height","flex","alignItems","flexGrow","textAlign","fontSize","marginBottom","marginLeft"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {\n  Animated,\n  TouchableWithoutFeedback,\n  StyleSheet,\n  View,\n  Platform,\n  Keyboard,\n} from 'react-native';\nimport SafeAreaView from 'react-native-safe-area-view';\n\nimport TabBarIcon from './TabBarIcon';\nimport NavigationActions from '../../NavigationActions';\nimport withOrientation from '../withOrientation';\n\nconst majorVersion = parseInt(Platform.Version, 10);\nconst isIos = Platform.OS === 'ios';\nconst isIOS11 = majorVersion >= 11 && isIos;\nconst defaultMaxTabBarItemWidth = 125;\n\nclass TabBarBottom extends React.PureComponent {\n  // See https://developer.apple.com/library/content/documentation/UserExperience/Conceptual/UIKitUICatalog/UITabBar.html\n  static defaultProps = {\n    activeTintColor: '#3478f6', // Default active tint color in iOS 10\n    activeBackgroundColor: 'transparent',\n    inactiveTintColor: '#929292', // Default inactive tint color in iOS 10\n    inactiveBackgroundColor: 'transparent',\n    showLabel: true,\n    showIcon: true,\n    allowFontScaling: true,\n    adaptive: isIOS11,\n  };\n\n  _renderLabel = scene => {\n    const {\n      position,\n      navigation,\n      activeTintColor,\n      inactiveTintColor,\n      labelStyle,\n      showLabel,\n      showIcon,\n      isLandscape,\n      allowFontScaling,\n    } = this.props;\n    if (showLabel === false) {\n      return null;\n    }\n    const { index } = scene;\n    const { routes } = navigation.state;\n    // Prepend '-1', so there are always at least 2 items in inputRange\n    const inputRange = [-1, ...routes.map((x, i) => i)];\n    const outputRange = inputRange.map(\n      inputIndex => (inputIndex === index ? activeTintColor : inactiveTintColor)\n    );\n    const color = position.interpolate({\n      inputRange,\n      outputRange: outputRange,\n    });\n\n    const tintColor = scene.focused ? activeTintColor : inactiveTintColor;\n    const label = this.props.getLabel({ ...scene, tintColor });\n\n    if (typeof label === 'string') {\n      return (\n        <Animated.Text\n          numberOfLines={1}\n          style={[\n            styles.label,\n            { color },\n            showIcon && this._shouldUseHorizontalTabs()\n              ? styles.labelBeside\n              : styles.labelBeneath,\n            labelStyle,\n          ]}\n          allowFontScaling={allowFontScaling}\n        >\n          {label}\n        </Animated.Text>\n      );\n    }\n\n    if (typeof label === 'function') {\n      return label({ ...scene, tintColor });\n    }\n\n    return label;\n  };\n\n  _renderIcon = scene => {\n    const {\n      position,\n      navigation,\n      activeTintColor,\n      inactiveTintColor,\n      renderIcon,\n      showIcon,\n      showLabel,\n    } = this.props;\n    if (showIcon === false) {\n      return null;\n    }\n    return (\n      <TabBarIcon\n        position={position}\n        navigation={navigation}\n        activeTintColor={activeTintColor}\n        inactiveTintColor={inactiveTintColor}\n        renderIcon={renderIcon}\n        scene={scene}\n        style={showLabel && this._shouldUseHorizontalTabs() ? {} : styles.icon}\n      />\n    );\n  };\n\n  _renderTestIDProps = scene => {\n    const testIDProps =\n      this.props.getTestIDProps && this.props.getTestIDProps(scene);\n    return testIDProps;\n  };\n\n  _tabItemMaxWidth() {\n    const { tabStyle, layout } = this.props;\n    let maxTabBarItemWidth;\n\n    const flattenedTabStyle = StyleSheet.flatten(tabStyle);\n\n    if (flattenedTabStyle) {\n      if (typeof flattenedTabStyle.width === 'number') {\n        maxTabBarItemWidth = flattenedTabStyle.width;\n      } else if (\n        typeof flattenedTabStyle.width === 'string' &&\n        flattenedTabStyle.endsWith('%')\n      ) {\n        const width = parseFloat(flattenedTabStyle.width);\n        if (Number.isFinite(width)) {\n          maxTabBarItemWidth = layout.width * (width / 100);\n        }\n      } else if (typeof flattenedTabStyle.maxWidth === 'number') {\n        maxTabBarItemWidth = flattenedTabStyle.maxWidth;\n      } else if (\n        typeof flattenedTabStyle.maxWidth === 'string' &&\n        flattenedTabStyle.endsWith('%')\n      ) {\n        const width = parseFloat(flattenedTabStyle.maxWidth);\n        if (Number.isFinite(width)) {\n          maxTabBarItemWidth = layout.width * (width / 100);\n        }\n      }\n    }\n\n    if (!maxTabBarItemWidth) {\n      maxTabBarItemWidth = defaultMaxTabBarItemWidth;\n    }\n\n    return maxTabBarItemWidth;\n  }\n\n  _shouldUseHorizontalTabs() {\n    const { routes } = this.props.navigation.state;\n    const { isLandscape, layout, adaptive, tabStyle } = this.props;\n\n    if (!adaptive) {\n      return false;\n    }\n\n    let tabBarWidth = layout.width;\n    if (tabBarWidth === 0) {\n      return Platform.isPad;\n    }\n\n    if (!Platform.isPad) {\n      return isLandscape;\n    } else {\n      const maxTabBarItemWidth = this._tabItemMaxWidth();\n      return routes.length * maxTabBarItemWidth <= tabBarWidth;\n    }\n  }\n\n  _handleTabPress = index => {\n    const { jumpToIndex, navigation } = this.props;\n    const currentIndex = navigation.state.index;\n\n    if (currentIndex === index) {\n      let childRoute = navigation.state.routes[index];\n      if (childRoute.hasOwnProperty('index') && childRoute.index > 0) {\n        navigation.dispatch(\n          NavigationActions.popToTop({ key: childRoute.key })\n        );\n      } else {\n        // TODO: do something to scroll to top\n      }\n    } else {\n      jumpToIndex(index);\n    }\n  };\n\n  render() {\n    const {\n      position,\n      navigation,\n      jumpToIndex,\n      getOnPress,\n      getTestIDProps,\n      activeBackgroundColor,\n      inactiveBackgroundColor,\n      style,\n      animateStyle,\n      tabStyle,\n      isLandscape,\n    } = this.props;\n    const { routes } = navigation.state;\n    const previousScene = routes[navigation.state.index];\n    // Prepend '-1', so there are always at least 2 items in inputRange\n    const inputRange = [-1, ...routes.map((x, i) => i)];\n\n    const tabBarStyle = [\n      styles.tabBar,\n      this._shouldUseHorizontalTabs() && !Platform.isPad\n        ? styles.tabBarCompact\n        : styles.tabBarRegular,\n      style,\n    ];\n\n    return (\n      <Animated.View style={animateStyle}>\n        <SafeAreaView\n          style={tabBarStyle}\n          forceInset={{ bottom: 'always', top: 'never' }}\n        >\n          {routes.map((route, index) => {\n            const focused = index === navigation.state.index;\n            const scene = { route, index, focused };\n            const onPress = getOnPress(previousScene, scene);\n            const outputRange = inputRange.map(\n              inputIndex =>\n                inputIndex === index\n                  ? activeBackgroundColor\n                  : inactiveBackgroundColor\n            );\n            const backgroundColor = position.interpolate({\n              inputRange,\n              outputRange: outputRange,\n            });\n\n            const justifyContent = this.props.showIcon ? 'flex-end' : 'center';\n            const extraProps = this._renderTestIDProps(scene) || {};\n            const { testID, accessibilityLabel } = extraProps;\n\n            return (\n              <TouchableWithoutFeedback\n                key={route.key}\n                testID={testID}\n                accessibilityLabel={accessibilityLabel}\n                onPress={() =>\n                  onPress\n                    ? onPress({\n                        previousScene,\n                        scene,\n                        jumpToIndex,\n                        defaultHandler: this._handleTabPress,\n                      })\n                    : this._handleTabPress(index)\n                }\n              >\n                <Animated.View style={[styles.tab, { backgroundColor }]}>\n                  <View\n                    style={[\n                      styles.tab,\n                      this._shouldUseHorizontalTabs()\n                        ? styles.tabLandscape\n                        : styles.tabPortrait,\n                      tabStyle,\n                    ]}\n                  >\n                    {this._renderIcon(scene)}\n                    {this._renderLabel(scene)}\n                  </View>\n                </Animated.View>\n              </TouchableWithoutFeedback>\n            );\n          })}\n        </SafeAreaView>\n      </Animated.View>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  tabBar: {\n    backgroundColor: '#F7F7F7', // Default background color in iOS 10\n    borderTopWidth: StyleSheet.hairlineWidth,\n    borderTopColor: 'rgba(0, 0, 0, .3)',\n    flexDirection: 'row',\n  },\n  tabBarCompact: {\n    height: 29,\n  },\n  tabBarRegular: {\n    height: 49,\n  },\n  tab: {\n    flex: 1,\n    alignItems: isIos ? 'center' : 'stretch',\n  },\n  tabPortrait: {\n    justifyContent: 'flex-end',\n    flexDirection: 'column',\n  },\n  tabLandscape: {\n    justifyContent: 'center',\n    flexDirection: 'row',\n  },\n  icon: {\n    flexGrow: 1,\n  },\n  label: {\n    textAlign: 'center',\n    backgroundColor: 'transparent',\n  },\n  labelBeneath: {\n    fontSize: 10,\n    marginBottom: 1.5,\n  },\n  labelBeside: {\n    fontSize: 13,\n    marginLeft: 20,\n  },\n});\n\nexport default withOrientation(TabBarBottom);\n"]},"metadata":{},"sourceType":"module"}