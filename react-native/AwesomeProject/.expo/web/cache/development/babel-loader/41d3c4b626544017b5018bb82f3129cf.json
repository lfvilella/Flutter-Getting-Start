{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"/Users/felipe/projects/lucy-farm/AwesomeProject/node_modules/react-navigation/src/views/ResourceSavingSceneView.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from 'react';\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport PropTypes from 'prop-types';\nimport SceneView from \"./SceneView\";\nvar FAR_FAR_AWAY = 3000;\n\nvar ResourceSavingSceneView = function (_React$PureComponent) {\n  _inherits(ResourceSavingSceneView, _React$PureComponent);\n\n  var _super = _createSuper(ResourceSavingSceneView);\n\n  function ResourceSavingSceneView(props) {\n    var _this;\n\n    _classCallCheck(this, ResourceSavingSceneView);\n\n    _this = _super.call(this);\n\n    _this._mustAlwaysBeVisible = function () {\n      return _this.props.animationEnabled || _this.props.swipeEnabled;\n    };\n\n    _this._onAction = function (payload) {\n      if (payload.action.type == 'Navigation/COMPLETE_TRANSITION' || !payload.state) {\n        return;\n      }\n\n      var _payload$state = payload.state,\n          routes = _payload$state.routes,\n          index = _payload$state.index;\n      var key = _this.props.childNavigation.state.key;\n\n      if (routes[index].key === key) {\n        if (!_this.state.visible) {\n          var nextState = {\n            visible: true\n          };\n\n          if (!_this.state.awake) {\n            nextState.awake = true;\n          }\n\n          _this.setState(nextState);\n        }\n      } else {\n        if (_this.state.visible) {\n          _this.setState({\n            visible: false\n          });\n        }\n      }\n    };\n\n    var _key = props.childNavigation.state.key;\n    var focusedIndex = props.navigation.state.index;\n    var focusedKey = props.navigation.state.routes[focusedIndex].key;\n    var isFocused = _key === focusedKey;\n    _this.state = {\n      awake: props.lazy ? isFocused : true,\n      visible: isFocused\n    };\n    return _this;\n  }\n\n  _createClass(ResourceSavingSceneView, [{\n    key: \"componentWillMount\",\n    value: function componentWillMount() {\n      this._actionListener = this.props.navigation.addListener('action', this._onAction);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this._actionListener.remove();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$state = this.state,\n          awake = _this$state.awake,\n          visible = _this$state.visible;\n\n      var _this$props = this.props,\n          childNavigation = _this$props.childNavigation,\n          navigation = _this$props.navigation,\n          removeClippedSubviews = _this$props.removeClippedSubviews,\n          lazy = _this$props.lazy,\n          rest = _objectWithoutProperties(_this$props, [\"childNavigation\", \"navigation\", \"removeClippedSubviews\", \"lazy\"]);\n\n      return React.createElement(View, {\n        style: styles.container,\n        collapsable: false,\n        removeClippedSubviews: Platform.OS === 'android' ? removeClippedSubviews : !visible && removeClippedSubviews,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 7\n        }\n      }, React.createElement(View, {\n        style: this._mustAlwaysBeVisible() || visible ? styles.innerAttached : styles.innerDetached,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 9\n        }\n      }, awake ? React.createElement(SceneView, _extends({}, rest, {\n        navigation: childNavigation,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 20\n        }\n      })) : null));\n    }\n  }]);\n\n  return ResourceSavingSceneView;\n}(React.PureComponent);\n\nexport { ResourceSavingSceneView as default };\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    overflow: 'hidden'\n  },\n  innerAttached: {\n    flex: 1\n  },\n  innerDetached: {\n    flex: 1,\n    top: FAR_FAR_AWAY\n  }\n});","map":{"version":3,"sources":["/Users/felipe/projects/lucy-farm/AwesomeProject/node_modules/react-navigation/src/views/ResourceSavingSceneView.js"],"names":["React","PropTypes","SceneView","FAR_FAR_AWAY","ResourceSavingSceneView","props","_mustAlwaysBeVisible","animationEnabled","swipeEnabled","_onAction","payload","action","type","state","routes","index","key","childNavigation","visible","nextState","awake","setState","focusedIndex","navigation","focusedKey","isFocused","lazy","_actionListener","addListener","remove","removeClippedSubviews","rest","styles","container","Platform","OS","innerAttached","innerDetached","PureComponent","StyleSheet","create","flex","overflow","top"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Platform, StyleSheet, View } from 'react-native';\nimport PropTypes from 'prop-types';\n\nimport SceneView from './SceneView';\n\nconst FAR_FAR_AWAY = 3000; // this should be big enough to move the whole view out of its container\n\nexport default class ResourceSavingSceneView extends React.PureComponent {\n  constructor(props) {\n    super();\n\n    const key = props.childNavigation.state.key;\n    const focusedIndex = props.navigation.state.index;\n    const focusedKey = props.navigation.state.routes[focusedIndex].key;\n    const isFocused = key === focusedKey;\n\n    this.state = {\n      awake: props.lazy ? isFocused : true,\n      visible: isFocused,\n    };\n  }\n\n  componentWillMount() {\n    this._actionListener = this.props.navigation.addListener(\n      'action',\n      this._onAction\n    );\n  }\n\n  componentWillUnmount() {\n    this._actionListener.remove();\n  }\n\n  render() {\n    const { awake, visible } = this.state;\n    const {\n      childNavigation,\n      navigation,\n      removeClippedSubviews,\n      lazy,\n      ...rest\n    } = this.props;\n\n    return (\n      <View\n        style={styles.container}\n        collapsable={false}\n        removeClippedSubviews={\n          Platform.OS === 'android'\n            ? removeClippedSubviews\n            : !visible && removeClippedSubviews\n        }\n      >\n        <View\n          style={\n            this._mustAlwaysBeVisible() || visible\n              ? styles.innerAttached\n              : styles.innerDetached\n          }\n        >\n          {awake ? <SceneView {...rest} navigation={childNavigation} /> : null}\n        </View>\n      </View>\n    );\n  }\n\n  _mustAlwaysBeVisible = () => {\n    return this.props.animationEnabled || this.props.swipeEnabled;\n  };\n\n  _onAction = payload => {\n    // We do not care about transition complete events, they won't actually change the state\n    if (\n      payload.action.type == 'Navigation/COMPLETE_TRANSITION' ||\n      !payload.state\n    ) {\n      return;\n    }\n\n    const { routes, index } = payload.state;\n    const key = this.props.childNavigation.state.key;\n\n    if (routes[index].key === key) {\n      if (!this.state.visible) {\n        let nextState = { visible: true };\n        if (!this.state.awake) {\n          nextState.awake = true;\n        }\n        this.setState(nextState);\n      }\n    } else {\n      if (this.state.visible) {\n        this.setState({ visible: false });\n      }\n    }\n  };\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    overflow: 'hidden',\n  },\n  innerAttached: {\n    flex: 1,\n  },\n  innerDetached: {\n    flex: 1,\n    top: FAR_FAR_AWAY,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}