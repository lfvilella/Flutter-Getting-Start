{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"/Users/felipe/projects/lucy-farm/AwesomeProject/node_modules/react-navigation/src/views/CardStack/CardStackTransitioner.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from 'react';\nimport NativeModules from \"react-native-web/dist/exports/NativeModules\";\nimport CardStack from \"./CardStack\";\nimport CardStackStyleInterpolator from \"./CardStackStyleInterpolator\";\nimport Transitioner from \"../Transitioner\";\nimport TransitionConfigs from \"./TransitionConfigs\";\nvar NativeAnimatedModule = NativeModules && NativeModules.NativeAnimatedModule;\n\nvar CardStackTransitioner = function (_React$Component) {\n  _inherits(CardStackTransitioner, _React$Component);\n\n  var _super = _createSuper(CardStackTransitioner);\n\n  function CardStackTransitioner() {\n    var _this;\n\n    _classCallCheck(this, CardStackTransitioner);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _this._configureTransition = function (transitionProps, prevTransitionProps) {\n      var isModal = _this.props.mode === 'modal';\n\n      var transitionSpec = _objectSpread({}, TransitionConfigs.getTransitionConfig(_this.props.transitionConfig, transitionProps, prevTransitionProps, isModal).transitionSpec);\n\n      if (!!NativeAnimatedModule && CardStackStyleInterpolator.canUseNativeDriver()) {\n        transitionSpec.useNativeDriver = true;\n      }\n\n      return transitionSpec;\n    };\n\n    _this._render = function (props, prevProps) {\n      var _this$props = _this.props,\n          screenProps = _this$props.screenProps,\n          headerMode = _this$props.headerMode,\n          headerTransitionPreset = _this$props.headerTransitionPreset,\n          mode = _this$props.mode,\n          router = _this$props.router,\n          cardStyle = _this$props.cardStyle,\n          transitionConfig = _this$props.transitionConfig;\n      return React.createElement(CardStack, {\n        screenProps: screenProps,\n        headerMode: headerMode,\n        headerTransitionPreset: headerTransitionPreset,\n        mode: mode,\n        router: router,\n        cardStyle: cardStyle,\n        transitionConfig: transitionConfig,\n        transitionProps: props,\n        prevTransitionProps: prevProps,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 7\n        }\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(CardStackTransitioner, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(Transitioner, {\n        configureTransition: this._configureTransition,\n        navigation: this.props.navigation,\n        render: this._render,\n        onTransitionStart: this.props.onTransitionStart,\n        onTransitionEnd: this.props.onTransitionEnd,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 19,\n          columnNumber: 7\n        }\n      });\n    }\n  }]);\n\n  return CardStackTransitioner;\n}(React.Component);\n\nCardStackTransitioner.defaultProps = {\n  mode: 'card'\n};\nexport default CardStackTransitioner;","map":{"version":3,"sources":["/Users/felipe/projects/lucy-farm/AwesomeProject/node_modules/react-navigation/src/views/CardStack/CardStackTransitioner.js"],"names":["React","CardStack","CardStackStyleInterpolator","Transitioner","TransitionConfigs","NativeAnimatedModule","NativeModules","CardStackTransitioner","_configureTransition","transitionProps","prevTransitionProps","isModal","props","mode","transitionSpec","getTransitionConfig","transitionConfig","canUseNativeDriver","useNativeDriver","_render","prevProps","screenProps","headerMode","headerTransitionPreset","router","cardStyle","navigation","onTransitionStart","onTransitionEnd","Component","defaultProps"],"mappings":";;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAGA,OAAOC,SAAP;AACA,OAAOC,0BAAP;AACA,OAAOC,YAAP;AACA,OAAOC,iBAAP;AAEA,IAAMC,oBAAoB,GACxBC,aAAa,IAAIA,aAAa,CAACD,oBADjC;;IAGME,qB;;;;;;;;;;;;;;;;UAiBJC,oB,GAAuB,UAErBC,eAFqB,EAIrBC,mBAJqB,EAKlB;AACH,UAAMC,OAAO,GAAG,MAAKC,KAAL,CAAWC,IAAX,KAAoB,OAApC;;AAEA,UAAMC,cAAc,qBACfV,iBAAiB,CAACW,mBAAlB,CACD,MAAKH,KAAL,CAAWI,gBADV,EAEDP,eAFC,EAGDC,mBAHC,EAIDC,OAJC,EAKDG,cANgB,CAApB;;AAQA,UACE,CAAC,CAACT,oBAAF,IAEAH,0BAA0B,CAACe,kBAA3B,EAHF,EAIE;AAEAH,QAAAA,cAAc,CAACI,eAAf,GAAiC,IAAjC;AACD;;AACD,aAAOJ,cAAP;AACD,K;;UAEDK,O,GAAU,UAACP,KAAD,EAAQQ,SAAR,EAAsB;AAAA,wBAS1B,MAAKR,KATqB;AAAA,UAE5BS,WAF4B,eAE5BA,WAF4B;AAAA,UAG5BC,UAH4B,eAG5BA,UAH4B;AAAA,UAI5BC,sBAJ4B,eAI5BA,sBAJ4B;AAAA,UAK5BV,IAL4B,eAK5BA,IAL4B;AAAA,UAM5BW,MAN4B,eAM5BA,MAN4B;AAAA,UAO5BC,SAP4B,eAO5BA,SAP4B;AAAA,UAQ5BT,gBAR4B,eAQ5BA,gBAR4B;AAU9B,aACE,oBAAC,SAAD;AACE,QAAA,WAAW,EAAEK,WADf;AAEE,QAAA,UAAU,EAAEC,UAFd;AAGE,QAAA,sBAAsB,EAAEC,sBAH1B;AAIE,QAAA,IAAI,EAAEV,IAJR;AAKE,QAAA,MAAM,EAAEW,MALV;AAME,QAAA,SAAS,EAAEC,SANb;AAOE,QAAA,gBAAgB,EAAET,gBAPpB;AAQE,QAAA,eAAe,EAAEJ,KARnB;AASE,QAAA,mBAAmB,EAAEQ,SATvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF;AAaD,K;;;;;;;6BA9DQ;AACP,aACE,oBAAC,YAAD;AACE,QAAA,mBAAmB,EAAE,KAAKZ,oBAD5B;AAEE,QAAA,UAAU,EAAE,KAAKI,KAAL,CAAWc,UAFzB;AAGE,QAAA,MAAM,EAAE,KAAKP,OAHf;AAIE,QAAA,iBAAiB,EAAE,KAAKP,KAAL,CAAWe,iBAJhC;AAKE,QAAA,eAAe,EAAE,KAAKf,KAAL,CAAWgB,eAL9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF;AASD;;;;EAfiC5B,KAAK,CAAC6B,S;;AAApCtB,qB,CACGuB,Y,GAAe;AACpBjB,EAAAA,IAAI,EAAE;AADc,C;AAqExB,eAAeN,qBAAf","sourcesContent":["import React from 'react';\nimport { NativeModules } from 'react-native';\n\nimport CardStack from './CardStack';\nimport CardStackStyleInterpolator from './CardStackStyleInterpolator';\nimport Transitioner from '../Transitioner';\nimport TransitionConfigs from './TransitionConfigs';\n\nconst NativeAnimatedModule =\n  NativeModules && NativeModules.NativeAnimatedModule;\n\nclass CardStackTransitioner extends React.Component {\n  static defaultProps = {\n    mode: 'card',\n  };\n\n  render() {\n    return (\n      <Transitioner\n        configureTransition={this._configureTransition}\n        navigation={this.props.navigation}\n        render={this._render}\n        onTransitionStart={this.props.onTransitionStart}\n        onTransitionEnd={this.props.onTransitionEnd}\n      />\n    );\n  }\n\n  _configureTransition = (\n    // props for the new screen\n    transitionProps,\n    // props for the old screen\n    prevTransitionProps\n  ) => {\n    const isModal = this.props.mode === 'modal';\n    // Copy the object so we can assign useNativeDriver below\n    const transitionSpec = {\n      ...TransitionConfigs.getTransitionConfig(\n        this.props.transitionConfig,\n        transitionProps,\n        prevTransitionProps,\n        isModal\n      ).transitionSpec,\n    };\n    if (\n      !!NativeAnimatedModule &&\n      // Native animation support also depends on the transforms used:\n      CardStackStyleInterpolator.canUseNativeDriver()\n    ) {\n      // Internal undocumented prop\n      transitionSpec.useNativeDriver = true;\n    }\n    return transitionSpec;\n  };\n\n  _render = (props, prevProps) => {\n    const {\n      screenProps,\n      headerMode,\n      headerTransitionPreset,\n      mode,\n      router,\n      cardStyle,\n      transitionConfig,\n    } = this.props;\n    return (\n      <CardStack\n        screenProps={screenProps}\n        headerMode={headerMode}\n        headerTransitionPreset={headerTransitionPreset}\n        mode={mode}\n        router={router}\n        cardStyle={cardStyle}\n        transitionConfig={transitionConfig}\n        transitionProps={props}\n        prevTransitionProps={prevProps}\n      />\n    );\n  };\n}\n\nexport default CardStackTransitioner;\n"]},"metadata":{},"sourceType":"module"}