{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"/Users/felipe/projects/test-react/node_modules/react-navigation/src/createNavigationContainer.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from 'react';\nimport Linking from \"react-native-web/dist/exports/Linking\";\nimport { BackHandler } from \"./PlatformHelpers\";\nimport NavigationActions from \"./NavigationActions\";\nimport addNavigationHelpers from \"./addNavigationHelpers\";\nimport invariant from \"./utils/invariant\";\nexport default function createNavigationContainer(Component) {\n  var NavigationContainer = function (_React$Component) {\n    _inherits(NavigationContainer, _React$Component);\n\n    var _super = _createSuper(NavigationContainer);\n\n    function NavigationContainer(props) {\n      var _this;\n\n      _classCallCheck(this, NavigationContainer);\n\n      _this = _super.call(this, props);\n      _this.subs = null;\n      _this._actionEventSubscribers = new Set();\n\n      _this._handleOpenURL = function (_ref) {\n        var url = _ref.url;\n\n        var parsedUrl = _this._urlToPathAndParams(url);\n\n        if (parsedUrl) {\n          var path = parsedUrl.path,\n              params = parsedUrl.params;\n          var action = Component.router.getActionForPathAndParams(path, params);\n\n          if (action) {\n            _this.dispatch(action);\n          }\n        }\n      };\n\n      _this.dispatch = function (action) {\n        if (!_this._isStateful()) {\n          return false;\n        }\n\n        _this._nav = _this._nav || _this.state.nav;\n        var oldNav = _this._nav;\n        invariant(oldNav, 'should be set in constructor if stateful');\n        var nav = Component.router.getStateForAction(action, oldNav);\n\n        var dispatchActionEvents = function dispatchActionEvents() {\n          _this._actionEventSubscribers.forEach(function (subscriber) {\n            return subscriber({\n              type: 'action',\n              action: action,\n              state: nav,\n              lastState: oldNav\n            });\n          });\n        };\n\n        if (nav && nav !== oldNav) {\n          _this._nav = nav;\n\n          _this.setState({\n            nav: nav\n          }, function () {\n            _this._onNavigationStateChange(oldNav, nav, action);\n\n            dispatchActionEvents();\n          });\n\n          return true;\n        } else {\n          dispatchActionEvents();\n        }\n\n        return false;\n      };\n\n      _this._validateProps(props);\n\n      _this._initialAction = NavigationActions.init();\n\n      if (_this._isStateful()) {\n        _this.subs = BackHandler.addEventListener('hardwareBackPress', function () {\n          if (!_this._isMounted) {\n            _this.subs && _this.subs.remove();\n          } else {\n            return _this.dispatch(NavigationActions.back());\n          }\n        });\n      }\n\n      _this.state = {\n        nav: _this._isStateful() ? Component.router.getStateForAction(_this._initialAction) : null\n      };\n      return _this;\n    }\n\n    _createClass(NavigationContainer, [{\n      key: \"_isStateful\",\n      value: function _isStateful() {\n        return !this.props.navigation;\n      }\n    }, {\n      key: \"_validateProps\",\n      value: function _validateProps(props) {\n        if (this._isStateful()) {\n          return;\n        }\n\n        var navigation = props.navigation,\n            screenProps = props.screenProps,\n            containerProps = _objectWithoutProperties(props, [\"navigation\", \"screenProps\"]);\n\n        var keys = Object.keys(containerProps);\n\n        if (keys.length !== 0) {\n          throw new Error('This navigator has both navigation and container props, so it is ' + (\"unclear if it should own its own state. Remove props: \\\"\" + keys.join(', ') + \"\\\" \") + 'if the navigator should get its state from the navigation prop. If the ' + 'navigator should maintain its own state, do not pass a navigation prop.');\n        }\n      }\n    }, {\n      key: \"_urlToPathAndParams\",\n      value: function _urlToPathAndParams(url) {\n        var params = {};\n        var delimiter = this.props.uriPrefix || '://';\n        var path = url.split(delimiter)[1];\n\n        if (typeof path === 'undefined') {\n          path = url;\n        } else if (path === '') {\n          path = '/';\n        }\n\n        return {\n          path: path,\n          params: params\n        };\n      }\n    }, {\n      key: \"_onNavigationStateChange\",\n      value: function _onNavigationStateChange(prevNav, nav, action) {\n        if (typeof this.props.onNavigationStateChange === 'undefined' && this._isStateful() && !!process.env.REACT_NAV_LOGGING) {\n          if (console.group) {\n            console.group('Navigation Dispatch: ');\n            console.log('Action: ', action);\n            console.log('New State: ', nav);\n            console.log('Last State: ', prevNav);\n            console.groupEnd();\n          } else {\n            console.log('Navigation Dispatch: ', {\n              action: action,\n              newState: nav,\n              lastState: prevNav\n            });\n          }\n\n          return;\n        }\n\n        if (typeof this.props.onNavigationStateChange === 'function') {\n          this.props.onNavigationStateChange(prevNav, nav, action);\n        }\n      }\n    }, {\n      key: \"componentWillReceiveProps\",\n      value: function componentWillReceiveProps(nextProps) {\n        this._validateProps(nextProps);\n      }\n    }, {\n      key: \"componentDidUpdate\",\n      value: function componentDidUpdate() {\n        if (this._nav === this.state.nav) {\n          this._nav = null;\n        }\n      }\n    }, {\n      key: \"componentDidMount\",\n      value: function componentDidMount() {\n        var _this2 = this;\n\n        this._isMounted = true;\n\n        if (!this._isStateful()) {\n          return;\n        }\n\n        Linking.addEventListener('url', this._handleOpenURL);\n        Linking.getInitialURL().then(function (url) {\n          return url && _this2._handleOpenURL({\n            url: url\n          });\n        });\n\n        this._actionEventSubscribers.forEach(function (subscriber) {\n          return subscriber({\n            type: 'action',\n            action: _this2._initialAction,\n            state: _this2.state.nav,\n            lastState: null\n          });\n        });\n      }\n    }, {\n      key: \"componentWillUnmount\",\n      value: function componentWillUnmount() {\n        this._isMounted = false;\n        Linking.removeEventListener('url', this._handleOpenURL);\n        this.subs && this.subs.remove();\n      }\n    }, {\n      key: \"render\",\n      value: function render() {\n        var _this3 = this;\n\n        var navigation = this.props.navigation;\n\n        if (this._isStateful()) {\n          var nav = this.state.nav;\n          invariant(nav, 'should be set in constructor if stateful');\n\n          if (!this._navigation || this._navigation.state !== nav) {\n            this._navigation = addNavigationHelpers({\n              dispatch: this.dispatch,\n              state: nav,\n              addListener: function addListener(eventName, handler) {\n                if (eventName !== 'action') {\n                  return {\n                    remove: function remove() {}\n                  };\n                }\n\n                _this3._actionEventSubscribers.add(handler);\n\n                return {\n                  remove: function remove() {\n                    _this3._actionEventSubscribers.delete(handler);\n                  }\n                };\n              }\n            });\n          }\n\n          navigation = this._navigation;\n        }\n\n        invariant(navigation, 'failed to get navigation');\n        return React.createElement(Component, _extends({}, this.props, {\n          navigation: navigation,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 226,\n            columnNumber: 14\n          }\n        }));\n      }\n    }]);\n\n    return NavigationContainer;\n  }(React.Component);\n\n  NavigationContainer.router = Component.router;\n  NavigationContainer.navigationOptions = null;\n  return NavigationContainer;\n}","map":{"version":3,"sources":["/Users/felipe/projects/test-react/node_modules/react-navigation/src/createNavigationContainer.js"],"names":["React","BackHandler","NavigationActions","addNavigationHelpers","invariant","createNavigationContainer","Component","NavigationContainer","props","subs","_actionEventSubscribers","Set","_handleOpenURL","url","parsedUrl","_urlToPathAndParams","path","params","action","router","getActionForPathAndParams","dispatch","_isStateful","_nav","state","nav","oldNav","getStateForAction","dispatchActionEvents","forEach","subscriber","type","lastState","setState","_onNavigationStateChange","_validateProps","_initialAction","init","addEventListener","_isMounted","remove","back","navigation","screenProps","containerProps","keys","Object","length","Error","join","delimiter","uriPrefix","split","prevNav","onNavigationStateChange","process","env","REACT_NAV_LOGGING","console","group","log","groupEnd","newState","nextProps","Linking","getInitialURL","then","removeEventListener","_navigation","addListener","eventName","handler","add","delete","navigationOptions"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Linking } from 'react-native';\nimport { BackHandler } from './PlatformHelpers';\nimport NavigationActions from './NavigationActions';\nimport addNavigationHelpers from './addNavigationHelpers';\nimport invariant from './utils/invariant';\n\n/**\n * Create an HOC that injects the navigation and manages the navigation state\n * in case it's not passed from above.\n * This allows to use e.g. the StackNavigator and TabNavigator as root-level\n * components.\n */\nexport default function createNavigationContainer(Component) {\n  class NavigationContainer extends React.Component {\n    subs = null;\n\n    static router = Component.router;\n    static navigationOptions = null;\n\n    _actionEventSubscribers = new Set();\n\n    constructor(props) {\n      super(props);\n\n      this._validateProps(props);\n\n      this._initialAction = NavigationActions.init();\n\n      if (this._isStateful()) {\n        this.subs = BackHandler.addEventListener('hardwareBackPress', () => {\n          if (!this._isMounted) {\n            this.subs && this.subs.remove();\n          } else {\n            // dispatch returns true if the action results in a state change,\n            // and false otherwise. This maps well to what BackHandler expects\n            // from a callback -- true if handled, false if not handled\n            return this.dispatch(NavigationActions.back());\n          }\n        });\n      }\n\n      this.state = {\n        nav: this._isStateful()\n          ? Component.router.getStateForAction(this._initialAction)\n          : null,\n      };\n    }\n\n    _isStateful() {\n      return !this.props.navigation;\n    }\n\n    _validateProps(props) {\n      if (this._isStateful()) {\n        return;\n      }\n\n      const { navigation, screenProps, ...containerProps } = props;\n\n      const keys = Object.keys(containerProps);\n\n      if (keys.length !== 0) {\n        throw new Error(\n          'This navigator has both navigation and container props, so it is ' +\n            `unclear if it should own its own state. Remove props: \"${keys.join(\n              ', '\n            )}\" ` +\n            'if the navigator should get its state from the navigation prop. If the ' +\n            'navigator should maintain its own state, do not pass a navigation prop.'\n        );\n      }\n    }\n\n    _urlToPathAndParams(url) {\n      const params = {};\n      const delimiter = this.props.uriPrefix || '://';\n      let path = url.split(delimiter)[1];\n      if (typeof path === 'undefined') {\n        path = url;\n      } else if (path === '') {\n        path = '/';\n      }\n      return {\n        path,\n        params,\n      };\n    }\n\n    _handleOpenURL = ({ url }) => {\n      const parsedUrl = this._urlToPathAndParams(url);\n      if (parsedUrl) {\n        const { path, params } = parsedUrl;\n        const action = Component.router.getActionForPathAndParams(path, params);\n        if (action) {\n          this.dispatch(action);\n        }\n      }\n    };\n\n    _onNavigationStateChange(prevNav, nav, action) {\n      if (\n        typeof this.props.onNavigationStateChange === 'undefined' &&\n        this._isStateful() &&\n        !!process.env.REACT_NAV_LOGGING\n      ) {\n        /* eslint-disable no-console */\n        if (console.group) {\n          console.group('Navigation Dispatch: ');\n          console.log('Action: ', action);\n          console.log('New State: ', nav);\n          console.log('Last State: ', prevNav);\n          console.groupEnd();\n        } else {\n          console.log('Navigation Dispatch: ', {\n            action,\n            newState: nav,\n            lastState: prevNav,\n          });\n        }\n        /* eslint-enable no-console */\n        return;\n      }\n\n      if (typeof this.props.onNavigationStateChange === 'function') {\n        this.props.onNavigationStateChange(prevNav, nav, action);\n      }\n    }\n\n    componentWillReceiveProps(nextProps) {\n      this._validateProps(nextProps);\n    }\n\n    componentDidUpdate() {\n      // Clear cached _nav every tick\n      if (this._nav === this.state.nav) {\n        this._nav = null;\n      }\n    }\n\n    componentDidMount() {\n      this._isMounted = true;\n      if (!this._isStateful()) {\n        return;\n      }\n\n      Linking.addEventListener('url', this._handleOpenURL);\n\n      Linking.getInitialURL().then(url => url && this._handleOpenURL({ url }));\n\n      this._actionEventSubscribers.forEach(subscriber =>\n        subscriber({\n          type: 'action',\n          action: this._initialAction,\n          state: this.state.nav,\n          lastState: null,\n        })\n      );\n    }\n\n    componentWillUnmount() {\n      this._isMounted = false;\n      Linking.removeEventListener('url', this._handleOpenURL);\n      this.subs && this.subs.remove();\n    }\n\n    // Per-tick temporary storage for state.nav\n\n    dispatch = action => {\n      if (!this._isStateful()) {\n        return false;\n      }\n      this._nav = this._nav || this.state.nav;\n      const oldNav = this._nav;\n      invariant(oldNav, 'should be set in constructor if stateful');\n      const nav = Component.router.getStateForAction(action, oldNav);\n      const dispatchActionEvents = () => {\n        this._actionEventSubscribers.forEach(subscriber =>\n          subscriber({\n            type: 'action',\n            action,\n            state: nav,\n            lastState: oldNav,\n          })\n        );\n      };\n      if (nav && nav !== oldNav) {\n        // Cache updates to state.nav during the tick to ensure that subsequent calls will not discard this change\n        this._nav = nav;\n        this.setState({ nav }, () => {\n          this._onNavigationStateChange(oldNav, nav, action);\n          dispatchActionEvents();\n        });\n        return true;\n      } else {\n        dispatchActionEvents();\n      }\n      return false;\n    };\n\n    render() {\n      let navigation = this.props.navigation;\n      if (this._isStateful()) {\n        const nav = this.state.nav;\n        invariant(nav, 'should be set in constructor if stateful');\n        if (!this._navigation || this._navigation.state !== nav) {\n          this._navigation = addNavigationHelpers({\n            dispatch: this.dispatch,\n            state: nav,\n            addListener: (eventName, handler) => {\n              if (eventName !== 'action') {\n                return { remove: () => {} };\n              }\n              this._actionEventSubscribers.add(handler);\n              return {\n                remove: () => {\n                  this._actionEventSubscribers.delete(handler);\n                },\n              };\n            },\n          });\n        }\n        navigation = this._navigation;\n      }\n      invariant(navigation, 'failed to get navigation');\n      return <Component {...this.props} navigation={navigation} />;\n    }\n  }\n\n  return NavigationContainer;\n}\n"]},"metadata":{},"sourceType":"module"}