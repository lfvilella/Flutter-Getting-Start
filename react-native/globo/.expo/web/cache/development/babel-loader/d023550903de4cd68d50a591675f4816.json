{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"/Users/felipe/projects/test-react/node_modules/react-navigation/src/views/Drawer/DrawerView.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from 'react';\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport DrawerLayout from 'react-native-drawer-layout-polyfill';\nimport addNavigationHelpers from \"../../addNavigationHelpers\";\nimport DrawerSidebar from \"./DrawerSidebar\";\nimport getChildEventSubscriber from \"../../getChildEventSubscriber\";\n\nvar DrawerView = function (_React$PureComponent) {\n  _inherits(DrawerView, _React$PureComponent);\n\n  var _super = _createSuper(DrawerView);\n\n  function DrawerView() {\n    var _this;\n\n    _classCallCheck(this, DrawerView);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.state = {\n      drawerWidth: typeof _this.props.drawerWidth === 'function' ? _this.props.drawerWidth() : _this.props.drawerWidth\n    };\n    _this._childEventSubscribers = {};\n\n    _this._handleDrawerOpen = function () {\n      var _this$props = _this.props,\n          navigation = _this$props.navigation,\n          drawerOpenRoute = _this$props.drawerOpenRoute;\n      var _navigation$state = navigation.state,\n          routes = _navigation$state.routes,\n          index = _navigation$state.index;\n\n      if (routes[index].routeName !== drawerOpenRoute) {\n        _this.props.navigation.navigate(drawerOpenRoute);\n      }\n    };\n\n    _this._handleDrawerClose = function () {\n      var _this$props2 = _this.props,\n          navigation = _this$props2.navigation,\n          drawerCloseRoute = _this$props2.drawerCloseRoute;\n      var _navigation$state2 = navigation.state,\n          routes = _navigation$state2.routes,\n          index = _navigation$state2.index;\n\n      if (routes[index].routeName !== drawerCloseRoute) {\n        _this.props.navigation.navigate(drawerCloseRoute);\n      }\n    };\n\n    _this._isRouteFocused = function (route) {\n      return function () {\n        var state = _this.props.navigation.state;\n        var focusedRoute = state.routes[state.index];\n        return route === focusedRoute;\n      };\n    };\n\n    _this._updateScreenNavigation = function (navigation) {\n      var drawerCloseRoute = _this.props.drawerCloseRoute;\n      var navigationState = navigation.state.routes.find(function (route) {\n        return route.routeName === drawerCloseRoute;\n      });\n\n      if (_this._screenNavigationProp && _this._screenNavigationProp.state === navigationState) {\n        return;\n      }\n\n      if (!_this._childEventSubscribers[navigationState.key]) {\n        _this._childEventSubscribers[navigationState.key] = getChildEventSubscriber(navigation.addListener, navigationState.key);\n      }\n\n      _this._screenNavigationProp = addNavigationHelpers({\n        dispatch: navigation.dispatch,\n        state: navigationState,\n        isFocused: function isFocused() {\n          return _this._isRouteFocused(navigationState);\n        },\n        addListener: _this._childEventSubscribers[navigationState.key]\n      });\n    };\n\n    _this._updateWidth = function () {\n      var drawerWidth = typeof _this.props.drawerWidth === 'function' ? _this.props.drawerWidth() : _this.props.drawerWidth;\n\n      if (_this.state.drawerWidth !== drawerWidth) {\n        _this.setState({\n          drawerWidth: drawerWidth\n        });\n      }\n    };\n\n    _this._getNavigationState = function (navigation) {\n      var drawerCloseRoute = _this.props.drawerCloseRoute;\n      var navigationState = navigation.state.routes.find(function (route) {\n        return route.routeName === drawerCloseRoute;\n      });\n      return navigationState;\n    };\n\n    _this._renderNavigationView = function () {\n      return React.createElement(DrawerSidebar, {\n        screenProps: _this.props.screenProps,\n        navigation: _this._screenNavigationProp,\n        router: _this.props.router,\n        contentComponent: _this.props.contentComponent,\n        contentOptions: _this.props.contentOptions,\n        drawerPosition: _this.props.drawerPosition,\n        style: _this.props.style,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 5\n        }\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(DrawerView, [{\n    key: \"componentWillMount\",\n    value: function componentWillMount() {\n      this._updateScreenNavigation(this.props.navigation);\n\n      Dimensions.addEventListener('change', this._updateWidth);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      Dimensions.removeEventListener('change', this._updateWidth);\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      var _this2 = this;\n\n      var activeKeys = this.props.navigation.state.routes.map(function (route) {\n        return route.key;\n      });\n      Object.keys(this._childEventSubscribers).forEach(function (key) {\n        if (!activeKeys.includes(key)) {\n          delete _this2._childEventSubscribers[key];\n        }\n      });\n    }\n  }, {\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps(nextProps) {\n      if (this.props.navigation.state.index !== nextProps.navigation.state.index) {\n        var _this$props3 = this.props,\n            drawerOpenRoute = _this$props3.drawerOpenRoute,\n            drawerCloseRoute = _this$props3.drawerCloseRoute,\n            drawerToggleRoute = _this$props3.drawerToggleRoute;\n        var _nextProps$navigation = nextProps.navigation.state,\n            routes = _nextProps$navigation.routes,\n            index = _nextProps$navigation.index;\n\n        if (routes[index].routeName === drawerOpenRoute) {\n          this._drawer.openDrawer();\n        } else if (routes[index].routeName === drawerToggleRoute) {\n          if (this.props.navigation.state.index === 0) {\n            this.props.navigation.navigate(drawerOpenRoute);\n          } else {\n            this.props.navigation.navigate(drawerCloseRoute);\n          }\n        } else {\n          this._drawer.closeDrawer();\n        }\n      }\n\n      this._updateScreenNavigation(nextProps.navigation);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      var DrawerScreen = this.props.router.getComponentForRouteName(this.props.drawerCloseRoute);\n      var config = this.props.router.getScreenOptions(this._screenNavigationProp, this.props.screenProps);\n      return React.createElement(DrawerLayout, {\n        ref: function ref(c) {\n          _this3._drawer = c;\n        },\n        drawerLockMode: this.props.screenProps && this.props.screenProps.drawerLockMode || config && config.drawerLockMode,\n        drawerBackgroundColor: this.props.drawerBackgroundColor,\n        drawerWidth: this.state.drawerWidth,\n        onDrawerOpen: this._handleDrawerOpen,\n        onDrawerClose: this._handleDrawerClose,\n        useNativeAnimations: this.props.useNativeAnimations,\n        renderNavigationView: this._renderNavigationView,\n        drawerPosition: this.props.drawerPosition === 'right' ? DrawerLayout.positions.Right : DrawerLayout.positions.Left,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 158,\n          columnNumber: 7\n        }\n      }, React.createElement(DrawerScreen, {\n        screenProps: this.props.screenProps,\n        navigation: this._screenNavigationProp,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 178,\n          columnNumber: 9\n        }\n      }));\n    }\n  }]);\n\n  return DrawerView;\n}(React.PureComponent);\n\nexport { DrawerView as default };","map":{"version":3,"sources":["/Users/felipe/projects/test-react/node_modules/react-navigation/src/views/Drawer/DrawerView.js"],"names":["React","DrawerLayout","addNavigationHelpers","DrawerSidebar","getChildEventSubscriber","DrawerView","state","drawerWidth","props","_childEventSubscribers","_handleDrawerOpen","navigation","drawerOpenRoute","routes","index","routeName","navigate","_handleDrawerClose","drawerCloseRoute","_isRouteFocused","route","focusedRoute","_updateScreenNavigation","navigationState","find","_screenNavigationProp","key","addListener","dispatch","isFocused","_updateWidth","setState","_getNavigationState","_renderNavigationView","screenProps","router","contentComponent","contentOptions","drawerPosition","style","Dimensions","addEventListener","removeEventListener","activeKeys","map","Object","keys","forEach","includes","nextProps","drawerToggleRoute","_drawer","openDrawer","closeDrawer","DrawerScreen","getComponentForRouteName","config","getScreenOptions","c","drawerLockMode","drawerBackgroundColor","useNativeAnimations","positions","Right","Left","PureComponent"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Dimensions } from 'react-native';\nimport DrawerLayout from 'react-native-drawer-layout-polyfill';\n\nimport addNavigationHelpers from '../../addNavigationHelpers';\nimport DrawerSidebar from './DrawerSidebar';\nimport getChildEventSubscriber from '../../getChildEventSubscriber';\n\n/**\n * Component that renders the drawer.\n */\nexport default class DrawerView extends React.PureComponent {\n  state = {\n    drawerWidth:\n      typeof this.props.drawerWidth === 'function'\n        ? this.props.drawerWidth()\n        : this.props.drawerWidth,\n  };\n\n  _childEventSubscribers = {};\n\n  componentWillMount() {\n    this._updateScreenNavigation(this.props.navigation);\n\n    Dimensions.addEventListener('change', this._updateWidth);\n  }\n\n  componentWillUnmount() {\n    Dimensions.removeEventListener('change', this._updateWidth);\n  }\n\n  componentDidUpdate() {\n    const activeKeys = this.props.navigation.state.routes.map(\n      route => route.key\n    );\n    Object.keys(this._childEventSubscribers).forEach(key => {\n      if (!activeKeys.includes(key)) {\n        delete this._childEventSubscribers[key];\n      }\n    });\n  }\n\n  componentWillReceiveProps(nextProps) {\n    if (\n      this.props.navigation.state.index !== nextProps.navigation.state.index\n    ) {\n      const {\n        drawerOpenRoute,\n        drawerCloseRoute,\n        drawerToggleRoute,\n      } = this.props;\n      const { routes, index } = nextProps.navigation.state;\n      if (routes[index].routeName === drawerOpenRoute) {\n        this._drawer.openDrawer();\n      } else if (routes[index].routeName === drawerToggleRoute) {\n        if (this.props.navigation.state.index === 0) {\n          this.props.navigation.navigate(drawerOpenRoute);\n        } else {\n          this.props.navigation.navigate(drawerCloseRoute);\n        }\n      } else {\n        this._drawer.closeDrawer();\n      }\n    }\n    this._updateScreenNavigation(nextProps.navigation);\n  }\n\n  _handleDrawerOpen = () => {\n    const { navigation, drawerOpenRoute } = this.props;\n    const { routes, index } = navigation.state;\n    if (routes[index].routeName !== drawerOpenRoute) {\n      this.props.navigation.navigate(drawerOpenRoute);\n    }\n  };\n\n  _handleDrawerClose = () => {\n    const { navigation, drawerCloseRoute } = this.props;\n    const { routes, index } = navigation.state;\n    if (routes[index].routeName !== drawerCloseRoute) {\n      this.props.navigation.navigate(drawerCloseRoute);\n    }\n  };\n\n  _isRouteFocused = route => () => {\n    const { state } = this.props.navigation;\n    const focusedRoute = state.routes[state.index];\n    return route === focusedRoute;\n  };\n\n  _updateScreenNavigation = navigation => {\n    const { drawerCloseRoute } = this.props;\n    const navigationState = navigation.state.routes.find(\n      route => route.routeName === drawerCloseRoute\n    );\n    if (\n      this._screenNavigationProp &&\n      this._screenNavigationProp.state === navigationState\n    ) {\n      return;\n    }\n\n    if (!this._childEventSubscribers[navigationState.key]) {\n      this._childEventSubscribers[\n        navigationState.key\n      ] = getChildEventSubscriber(navigation.addListener, navigationState.key);\n    }\n\n    this._screenNavigationProp = addNavigationHelpers({\n      dispatch: navigation.dispatch,\n      state: navigationState,\n      isFocused: () => this._isRouteFocused(navigationState),\n      addListener: this._childEventSubscribers[navigationState.key],\n    });\n  };\n\n  _updateWidth = () => {\n    const drawerWidth =\n      typeof this.props.drawerWidth === 'function'\n        ? this.props.drawerWidth()\n        : this.props.drawerWidth;\n\n    if (this.state.drawerWidth !== drawerWidth) {\n      this.setState({ drawerWidth });\n    }\n  };\n\n  _getNavigationState = navigation => {\n    const { drawerCloseRoute } = this.props;\n    const navigationState = navigation.state.routes.find(\n      route => route.routeName === drawerCloseRoute\n    );\n    return navigationState;\n  };\n\n  _renderNavigationView = () => (\n    <DrawerSidebar\n      screenProps={this.props.screenProps}\n      navigation={this._screenNavigationProp}\n      router={this.props.router}\n      contentComponent={this.props.contentComponent}\n      contentOptions={this.props.contentOptions}\n      drawerPosition={this.props.drawerPosition}\n      style={this.props.style}\n    />\n  );\n\n  render() {\n    const DrawerScreen = this.props.router.getComponentForRouteName(\n      this.props.drawerCloseRoute\n    );\n\n    const config = this.props.router.getScreenOptions(\n      this._screenNavigationProp,\n      this.props.screenProps\n    );\n\n    return (\n      <DrawerLayout\n        ref={c => {\n          this._drawer = c;\n        }}\n        drawerLockMode={\n          (this.props.screenProps && this.props.screenProps.drawerLockMode) ||\n          (config && config.drawerLockMode)\n        }\n        drawerBackgroundColor={this.props.drawerBackgroundColor}\n        drawerWidth={this.state.drawerWidth}\n        onDrawerOpen={this._handleDrawerOpen}\n        onDrawerClose={this._handleDrawerClose}\n        useNativeAnimations={this.props.useNativeAnimations}\n        renderNavigationView={this._renderNavigationView}\n        drawerPosition={\n          this.props.drawerPosition === 'right'\n            ? DrawerLayout.positions.Right\n            : DrawerLayout.positions.Left\n        }\n      >\n        <DrawerScreen\n          screenProps={this.props.screenProps}\n          navigation={this._screenNavigationProp}\n        />\n      </DrawerLayout>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}